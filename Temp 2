// craco.config.js
const webpack = require('webpack');
const path = require('path');

module.exports = {
  babel: {
    plugins: [
      '@babel/plugin-proposal-optional-chaining',
      '@babel/plugin-proposal-nullish-coalescing-operator'
    ]
  },
  webpack: {
    configure: (webpackConfig) => {
      // 1) Fallback for require('process')
      webpackConfig.resolve = {
        ...webpackConfig.resolve,
        fallback: {
          ...(webpackConfig.resolve.fallback || {}),
          process: require.resolve('process/browser.js'),
        },
        // 2) Alias for require('process/browser')
        alias: {
          ...(webpackConfig.resolve.alias || {}),
          'process/browser': require.resolve('process/browser.js'),
        }
      };

      // 3) Provide global process
      webpackConfig.plugins.push(
        new webpack.ProvidePlugin({
          process: 'process/browser',
        })
      );

      return webpackConfig;
    }
  }
};









import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary }) {
  if (!summary) return null;
  
  return (
    <Grid container spacing={2} sx={{ mb: 3 }}>
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Total Alarms
            </Typography>
            <Typography variant="h4">
              {summary.totalAlarms}
            </Typography>
          </CardContent>
        </Card>
      </Grid>
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Response Sent %
            </Typography>
            <Typography variant="h4">
              {summary.responseSentPercentage}
            </Typography>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
}




import React, { useEffect, useRef } from 'react';
import Chart from 'chart.js/auto';

const defaultColors = [
  '#8884d8',
  '#82ca9d',
  '#ffc658',
  '#ff7f50',
  '#a29bfe',
  '#20c997',
  '#fd7e14',
  '#6c757d',
];

const MyChart = ({ type = 'bar', data, options = {}, width = '100%', height = 400 }) => {
  const canvasRef = useRef(null);
  const chartRef  = useRef(null);

  useEffect(() => {
    if (!canvasRef.current) return;
    const ctx = canvasRef.current.getContext('2d');

    if (chartRef.current) {
      chartRef.current.destroy();
    }

    // build dataset
    const chartData = {
      labels: data.labels,
      datasets: [{
        label: data.label || '',
        data: data.values,
        backgroundColor: data.bgColors || defaultColors.slice(0, data.values.length),
        borderWidth: 1,
      }],
    };

    chartRef.current = new Chart(ctx, {
      type,
      data: chartData,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        ...options,
        scales: {
          x: { beginAtZero: true, ...(options.scales?.x || {}) },
          y: { beginAtZero: true, ...(options.scales?.y || {}) },
        },
      },
    });

    return () => chartRef.current && chartRef.current.destroy();
  }, [type, data, options]);

  return (
    <div style={{ width, height }}>
      <canvas ref={canvasRef} />
    </div>
  );
};

export default MyChart;




import React from 'react';
import { TextField, MenuItem } from '@mui/material';

const Filters = ({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = []
}) => {
  const handleChange = (field) => (e) =>
    setFilters(prev => ({
      ...prev,
      [field]: e.target.value,
      ...(field === 'region' && { location: '' })
    }));

  return (
    <div style={{ display: 'flex', gap: '1rem', marginBottom: 16 }}>
      <TextField
        select
        label="Region"
        value={filters.region}
        onChange={handleChange('region')}
        style={{ minWidth: 150 }}
      >
        <MenuItem value="">Global</MenuItem>
        {regionOptions.map(region => (
          <MenuItem key={region} value={region}>
            {region}
          </MenuItem>
        ))}
      </TextField>

      {filters.region && (
        <TextField
          select
          label="Location"
          value={filters.location}
          onChange={handleChange('location')}
          style={{ minWidth: 200 }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(loc => (
            <MenuItem key={loc} value={loc}>
              {loc}
            </MenuItem>
          ))}
        </TextField>
      )}
    </div>
  );
};

export default Filters;






import React from 'react';
import './SummaryCards.css';
import MyChart from './chart';
import { Card, CardContent, Typography, Grid } from '@mui/material';

const COLORS = [
  '#007bff', '#28a745', '#ffc107',
  '#dc3545', '#6f42c1', '#17a2b8',
  '#fd7e14', '#20c997', '#6c757d',
  '#6610f2',
];

export default function SummaryCards({ summary, filters, locationOptions }) {
  if (!summary) return null;

  // helper to turn summary.* into { labels, values, bgColors }
  const makeData = obj => {
    const labels = Object.keys(obj);
    const values = labels.map(lbl => obj[lbl].count);
    const bg     = labels.map((_, i) => COLORS[i % COLORS.length]);
    return { labels, values, bg };
  };

  // top-level partition
  const partitionObj = !filters.region
    ? summary.regionWise
    : summary.locationWise;

  // other chart configs
  const chartConfigs = [
    { key: 'priorityWise',      title: 'Priority Wise',      type: 'pie' },
    { key: 'rejectionTypeWise', title: 'Rejection Type Wise', type: 'pie' },
    { key: 'operatorWise',      title: 'Operator Wise',      type: 'bar' },
    { key: 'monthWise',         title: 'Month Wise',         type: 'bar' },
    filters.region && { key: 'locationWise', title: 'Location Wise', type: 'pie' }
  ].filter(Boolean);

  return (
    <div className="summary-container">
      {/* Partition chart */}
      <Grid container spacing={2} sx={{ mb: 4, justifyContent: 'center' }}>
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {!filters.region ? 'Global Partition' : `${filters.region} Partition`}
              </Typography>
              <MyChart
                type="doughnut"
                data={makeData(partitionObj)}
                height={300}
              />
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Other summary charts */}
      <Grid container spacing={2}>
        {chartConfigs.map(({ key, title, type }) => {
          const obj = summary[key];
          if (!obj || Object.keys(obj).length === 0) return null;
          return (
            <Grid item xs={12} md={6} key={key}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    {title}
                  </Typography>
                  <MyChart
                    type={type}
                    data={makeData(obj)}
                    height={250}
                  />
                </CardContent>
              </Card>
            </Grid>
          );
        })}
      </Grid>
    </div>
  );
}









import React, { useEffect, useState, useMemo } from 'react';
import { Container, Typography } from '@mui/material';
import Filters        from '../components/Filters';
import SummaryCards   from '../components/SummaryCards';
import AlarmCard      from '../components/AlarmCard';
import { getAlarmSummary, getRawAlarms } from '../services/api';

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({ region: '', location: '' });

  // fetch both at mount
  useEffect(() => {
    getAlarmSummary()
      .then(res => setSummary(res.data))
      .catch(console.error);
    getRawAlarms()
      .then(res => setRawAlarms(res.data))
      .catch(console.error);
  }, []);

  // build dynamic locationOptions
  const regionOptions   = summary ? Object.keys(summary.regionWise) : [];
  const locationOptions = filters.region
    ? Array.from(new Set(
        rawAlarms
          .filter(a => a.Region === filters.region)
          .map(a => a.Location)
      ))
    : [];

  // filteredSummary: if a region is selected, we shrink regionWise & build locationWise
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };
    if (filters.region) {
      fs.regionWise = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(loc => !filters.location || loc === filters.location)
        .forEach(loc => {
          fs.locationWise[loc] = summary.locationWise[loc];
        });
    }
    return fs;
  }, [summary, filters, locationOptions]);

  if (!summary) {
    return <Typography>Loading dashboardâ€¦</Typography>;
  }

  return (
    <Container sx={{ py: 4 }}>
      <Typography variant="h4" gutterBottom>
        Alarm Analysis Dashboard
      </Typography>

      <Filters
        filters={filters}
        setFilters={setFilters}
        regionOptions={regionOptions}
        locationOptions={locationOptions}
      />

      <AlarmCard summary={summary} />

      <SummaryCards
        summary={filteredSummary}
        filters={filters}
        locationOptions={locationOptions}
      />

      {/* you can re-enable your raw table here when ready */}
      {/* <AlarmsTable data={rawAlarms} /> */}
    </Container>
  );
}














Read carefully API And API responce then  make changes on my js files and give me Updated js files carefully.


API-http://localhost:3000/api/alarms/summary

{
  "totalAlarms": 5566,
  "regionWise": {
    "EMEA": {
      "count": 2685,
      "percentage": "48.24%"
    },
    "APAC": {
      "count": 1602,
      "percentage": "28.78%"
    },
    "LACA": {
      "count": 942,
      "percentage": "16.92%"
    },
    "NAMER": {
      "count": 337,
      "percentage": "6.05%"
    }
  },
  "priorityWise": {
    "Low": {
      "count": 3504,
      "percentage": "62.95%"
    },
    "Medium": {
      "count": 1024,
      "percentage": "18.40%"
    },
    "High": {
      "count": 1038,
      "percentage": "18.65%"
    }
  },
  "rejectionTypeWise": {
    "Wrong Pin": {
      "count": 2397,
      "percentage": "43.07%"
    },
    "Expired": {
      "count": 433,
      "percentage": "7.78%"
    },
    "Clearance - Access Violation": {
      "count": 580,
      "percentage": "10.42%"
    },
    "Disabled Badge": {
      "count": 1038,
      "percentage": "18.65%"
    },
    "Unknown card": {
      "count": 747,
      "percentage": "13.42%"
    },
    "Facility code": {
      "count": 351,
      "percentage": "6.31%"
    },
    "Not activated": {
      "count": 4,
      "percentage": "0.07%"
    },
    "Site code": {
      "count": 2,
      "percentage": "0.04%"
    },
    "Lost": {
      "count": 11,
      "percentage": "0.20%"
    },
    "Site Code": {
      "count": 3,
      "percentage": "0.05%"
    }
  },
  "locationWise": {
    "LT.Vilnius": {
      "count": 2067,
      "percentage": "37.14%"
    },
    "IE.Dublin": {
      "count": 90,
      "percentage": "1.62%"
    },
    "ES.Madrid": {
      "count": 210,
      "percentage": "3.77%"
    },
    "APAC.Default": {
      "count": 1516,
      "percentage": "27.24%"
    },
    "PH.Manila": {
      "count": 63,
      "percentage": "1.13%"
    },
    "AR.Cordoba": {
      "count": 370,
      "percentage": "6.65%"
    },
    "CR.Costa Rica Partition": {
      "count": 167,
      "percentage": "3.00%"
    },
    "BR.Sao Paulo": {
      "count": 233,
      "percentage": "4.19%"
    },
    "MX.Mexico City": {
      "count": 60,
      "percentage": "1.08%"
    },
    "PA.Panama City": {
      "count": 109,
      "percentage": "1.96%"
    },
    "AUT.Vienna": {
      "count": 83,
      "percentage": "1.49%"
    },
    "USA/Canada Default": {
      "count": 68,
      "percentage": "1.22%"
    },
    "US.CO.OBS": {
      "count": 237,
      "percentage": "4.26%"
    },
    "JP.Tokyo": {
      "count": 5,
      "percentage": "0.09%"
    },
    "DU.Abu Dhab": {
      "count": 203,
      "percentage": "3.65%"
    },
    "MA.Casablanca": {
      "count": 10,
      "percentage": "0.18%"
    },
    "PE.Lima": {
      "count": 3,
      "percentage": "0.05%"
    },
    "US.NYC": {
      "count": 20,
      "percentage": "0.36%"
    },
    "UK.London": {
      "count": 16,
      "percentage": "0.29%"
    },
    "IT.Rome": {
      "count": 6,
      "percentage": "0.11%"
    },
    "MY.Kuala Lumpur": {
      "count": 18,
      "percentage": "0.32%"
    },
    "US.FL.Miami": {
      "count": 12,
      "percentage": "0.22%"
    }
  },
  "operatorWise": {
    "Manisha Choudhari": {
      "count": 1174,
      "percentage": "21.09%"
    },
    "Swapnil Diwate": {
      "count": 280,
      "percentage": "5.03%"
    },
    "Ayush Kumar": {
      "count": 404,
      "percentage": "7.26%"
    },
    "Sankalp Mahitkar": {
      "count": 1185,
      "percentage": "21.29%"
    },
    "Abhishek Dhoble": {
      "count": 320,
      "percentage": "5.75%"
    },
    "Sejal Satpute": {
      "count": 994,
      "percentage": "17.86%"
    },
    "Aniket Kakade": {
      "count": 243,
      "percentage": "4.37%"
    },
    "Vrutik Paste": {
      "count": 923,
      "percentage": "16.58%"
    },
    "Aniket kakade": {
      "count": 43,
      "percentage": "0.77%"
    }
  },
  "responseSentPercentage": "9.36%",
  "monthWise": {
    "04-2025": {
      "count": 5566,
      "percentage": "100.00%"
    }
  }
}





API
http://localhost:3000/api/alarms/raw



[
  {
    "Sr. No": 1,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "05:21:18",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_9th Flr_Main Entrance",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Manisha Choudhari",
    "Employee Name": "Jhorar, Kapil",
    "Employee ID No": 326022,
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "05:21:18",
    " Time Taken (Min)": 0,
    "Time of Completion": "05:21:18",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "Completed By": "Manisha Choudhari"
  },
  {
    "Sr. No": 2,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "11:12:09",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_9th Flr_Main Entrance",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Swapnil Diwate",
    "Employee Name": "Zikov Laurino, Ivan Alexander",
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "11:12:09",
    " Time Taken (Min)": 0,
    "Time of Completion": "11:12:09",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "Completed By": "Swapnil Diwate"
  },
  {
    "Sr. No": 3,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "11:20:23",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_9th Flr_Main Entrance",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Swapnil Diwate",
    "Employee Name": "Trinkune, Jolanta",
    "Employee ID No": 307427,
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "11:20:23",
    " Time Taken (Min)": 0,
    "Time of Completion": "11:20:23",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "Completed By": "Swapnil Diwate"
  },
  {
    "Sr. No": 4,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "11:41:17",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_1st Flr_Parking",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Swapnil Diwate",
    "Employee Name": "Kitkovskaja, Beata",
    "Employee ID No": 250761,
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "11:41:17",
    " Time Taken (Min)": 0,
    "Time of Completion": "11:41:17",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "Completed By": "Swapnil Diwate"
  },
  {
