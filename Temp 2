// src/components/Footer.js
import React from 'react';
import {
  Box,
  Container,
  Grid,
  Typography,
  Link as MuiLink,
  Select,
  MenuItem,
  Chip,
  Stack,
  useTheme
} from '@mui/material';
import PublicIcon from '@mui/icons-material/Public';
import FacebookIcon from '@mui/icons-material/Facebook';
import YouTubeIcon from '@mui/icons-material/YouTube';
import InstagramIcon from '@mui/icons-material/Instagram';
import TwitterIcon from '@mui/icons-material/Twitter';
import Logo from '../assets/wu-logo.png'; // your Western Union logo

const popular = ['India', 'Mexico', 'Pakistan', 'China'];

const importantPages = [
  { label: 'Home', href: '/' },
  { label: 'About us', href: '/about' },
  { label: 'Contact us', href: '/contact' },
  { label: 'Fraud awareness', href: '/fraud' },
  { label: 'Privacy Statement', href: '/privacy' },
  { label: 'Terms & Conditions', href: '/terms' },
  { label: 'Ad Choices', href: '/ad-choices' },
  { label: 'Cookie Information', href: '/cookies' },
];

export default function Footer() {
  const theme = useTheme();
  const dark = theme.palette.mode === 'dark';

  return (
    <Box
      component="footer"
      sx={{
        bgcolor: dark ? '#111' : '#222',
        color: dark ? '#eee' : '#fff',
        pt: 6,
        pb: 4,
      }}
    >
      <Container maxWidth="lg">
        {/* Top tagline + selector + destinations */}
        <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold' }}>
          We transfer world-wide
        </Typography>
        <Typography variant="body1" gutterBottom>
          Send money online to 200 countries and territories with hundreds of thousands of Western Union agent locations.
        </Typography>

        <Grid container spacing={2} alignItems="center" sx={{ mb: 4 }}>
          {/* Location selector */}
          <Grid item xs={12} md="auto">
            <Select
              startAdornment={<PublicIcon sx={{ mr: 1 }} />}
              defaultValue="US"
              sx={{
                background: dark ? '#222' : '#333',
                color: '#fff',
                '& .MuiSelect-icon': { color: '#fff' }
              }}
            >
              <MenuItem value="US">United States</MenuItem>
              <MenuItem value="CA">Canada</MenuItem>
              <MenuItem value="GB">United Kingdom</MenuItem>
            </Select>
          </Grid>

          {/* Popular destinations */}
          <Grid item xs>
            <Stack direction="row" spacing={1} flexWrap="wrap">
              {popular.map(dest => (
                <Chip
                  key={dest}
                  label={dest}
                  clickable
                  sx={{
                    background: dark ? '#333' : '#444',
                    color: '#fff',
                    height: 32
                  }}
                />
              ))}
            </Stack>
          </Grid>
        </Grid>

        {/* Important pages */}
        <Stack
          direction="row"
          flexWrap="wrap"
          spacing={2}
          sx={{ mb: 4 }}
        >
          {importantPages.map(p => (
            <MuiLink
              key={p.label}
              href={p.href}
              underline="hover"
              sx={{ color: '#FFD100', fontSize: '0.875rem' }}
            >
              {p.label}
            </MuiLink>
          ))}
        </Stack>

        <Grid container spacing={4} alignItems="center">
          {/* Logo */}
          <Grid item xs={12} md={3} textAlign={{ xs: 'center', md: 'left' }}>
            <Box
              component="img"
              src={Logo}
              alt="Western Union"
              sx={{ height: 56 }}
            />
          </Grid>

          {/* Legal text */}
          <Grid item xs={12} md={6}>
            <Typography variant="caption" display="block">
              Services may be provided by Western Union Financial Services, Inc. NMLS# 906983 and/or Western Union International Services, LLC NMLS# 906985.
            </Typography>
            <Typography variant="caption" display="block">
              © 2025 Western Union Holdings, Inc. All Rights Reserved.
            </Typography>
          </Grid>

          {/* Social icons */}
          <Grid item xs={12} md={3} textAlign={{ xs: 'center', md: 'right' }}>
            <Stack direction="row" spacing={1} justifyContent="flex-end">
              <MuiLink href="https://facebook.com" color="inherit">
                <FacebookIcon />
              </MuiLink>
              <MuiLink href="https://youtube.com" color="inherit">
                <YouTubeIcon />
              </MuiLink>
              <MuiLink href="https://instagram.com" color="inherit">
                <InstagramIcon />
              </MuiLink>
              <MuiLink href="https://twitter.com" color="inherit">
                <TwitterIcon />
              </MuiLink>
            </Stack>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
}




















// src/components/Footer.js





import React from 'react';
import { Box, Typography, useTheme, Grid, Link as MuiLink } from '@mui/material';
import Logo from '../assets/wu-logo.png'; // Update this path to your actual logo

export default function Footer() {
  const theme = useTheme();
  const isDark = theme.palette.mode === 'dark';

  const bgColor = isDark ? '#1e1e1e' : '#f5f5f5';
  const textColor = isDark ? '#ffffff' : '#333';

  return (
    <Box
      component="footer"
      sx={{
        backgroundColor: bgColor,
        color: textColor,
        py: 4,
        px: 2,
        mt: 4,
        borderTop: `1px solid ${isDark ? '#444' : '#ccc'}`,
      }}
    >
      <Grid container spacing={4} justifyContent="space-between" alignItems="center">
        {/* Left Side: Logo */}
        <Grid item xs={12} md={4} textAlign={{ xs: 'center', md: 'left' }}>
          <Box
            component="img"
            src={Logo}
            alt="Western Union Logo"
            sx={{ maxWidth: 200 }}
          />
        </Grid>

        {/* Right Side: Support and Links */}
        <Grid item xs={12} md={8}>
          <Grid container spacing={2} justifyContent="flex-end">
            <Grid item xs={12} md={4}>
              <Typography variant="subtitle1" fontWeight="bold">Support</Typography>
              <Typography variant="body2">Email: support@westernunion.com</Typography>
              <Typography variant="body2">Phone: +1-800-123-4567</Typography>
            </Grid>
            <Grid item xs={12} md={4}>
              <Typography variant="subtitle1" fontWeight="bold">Quick Links</Typography>
              <MuiLink href="#" underline="hover" color="inherit">Home</MuiLink><br />
              <MuiLink href="#" underline="hover" color="inherit">Dashboard</MuiLink><br />
              <MuiLink href="#" underline="hover" color="inherit">Contact</MuiLink>
            </Grid>
            <Grid item xs={12} md={4} textAlign={{ xs: 'center', md: 'right' }}>
              <Typography variant="body2" sx={{ mt: { xs: 2, md: 0 } }}>
                © 2025 Western Union. All rights reserved.
              </Typography>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </Box>
  );
}












import React from 'react';
import {
  TextField,
  MenuItem,
  Grid,
  InputAdornment
} from '@mui/material';
import { useTheme } from '@mui/material/styles'; // <-- added
import PublicIcon from '@mui/icons-material/Public';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import EventIcon from '@mui/icons-material/Event';
import SearchIcon from '@mui/icons-material/Search';
import PriorityHighIcon from '@mui/icons-material/PriorityHigh';

export default function Filters({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = [],
  monthOptions,
  employeeOptions,
  doorOptions,
  priorityOptions,
  rejectionOptions
}) {
  const theme = useTheme(); // <-- added
  const iconColor = theme.palette.mode === 'dark' ? '#fff' : '#000'; // <-- added

  const handleChange = field => e => {
    const value = e.target.value;
    setFilters(prev => {
      const next = { ...prev, [field]: value };
      if (field === 'region') {
        next.location = '';
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'location') {
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'month') {
        next.date = '';
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'date') {
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'priority') {
        next.rejection = '';
      }
      if (field === 'door') {
        next.rejection = '';
      }
      return next;
    });
  };

  return (
    <Grid container spacing={1} alignItems="center" sx={{ mb: 0 }}>
      {/* Region */}
      <Grid item>
        <TextField
          select label="Region" fullWidth
          value={filters.region}
          onChange={handleChange('region')}
          size="medium"
          sx={{ minWidth: 120 }}
          InputProps={{
            style: { color: iconColor },
            startAdornment: (
              <InputAdornment position="start">
                <PublicIcon sx={{ color: iconColor }} />
              </InputAdornment>
            )
          }}
        >
          <MenuItem value="">All Regions</MenuItem>
          {regionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Location */}
      <Grid item>
        <TextField
          select label="Location" fullWidth
          value={filters.location}
          onChange={handleChange('location')}
          size="medium"
          sx={{ minWidth: 120 }}
          disabled={!filters.region}
          InputProps={{
            style: { color: iconColor },
            startAdornment: (
              <InputAdornment position="start">
                <LocationOnIcon sx={{ color: iconColor }} />
              </InputAdornment>
            )
          }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(l => <MenuItem key={l} value={l}>{l}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Month */}
      {monthOptions && (
        <Grid item>
          <TextField
            select label="Month" fullWidth
            value={filters.month}
            onChange={handleChange('month')}
            size="medium"
            sx={{ minWidth: 120 }}
            InputProps={{
              style: { color: iconColor },
              startAdornment: (
                <InputAdornment position="start">
                  <CalendarMonthIcon sx={{ color: iconColor }} />
                </InputAdornment>
              )
            }}
          >
            <MenuItem value="">All Months</MenuItem>
            {monthOptions.map(m => <MenuItem key={m} value={m}>{m}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Date */}
      {filters.hasOwnProperty('date') && (
        <Grid item>
          <TextField
            label="Date"
            type="date"
            fullWidth
            value={filters.date}
            onChange={handleChange('date')}
            size="medium"
            sx={{ minWidth: 120 }}
            InputLabelProps={{ shrink: true }}
            InputProps={{
              style: { color: iconColor },
              startAdornment: (
                <InputAdornment position="start">
                  <EventIcon sx={{ color: iconColor }} />
                </InputAdornment>
              )
            }}
          />
        </Grid>
      )}

      {/* Priority */}
      {priorityOptions && (
        <Grid item>
          <TextField
            select label="Priority" fullWidth
            value={filters.priority}
            onChange={handleChange('priority')}
            size="medium"
            sx={{ minWidth: 120 }}
            InputProps={{
              style: { color: iconColor },
              startAdornment: (
                <InputAdornment position="start">
                  <PriorityHighIcon sx={{ color: iconColor }} />
                </InputAdornment>
              )
            }}
          >
            <MenuItem value="">All Priorities</MenuItem>
            {priorityOptions.map(p => <MenuItem key={p} value={p}>{p}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Rejection */}
      {rejectionOptions && (
        <Grid item>
          <TextField
            select label="Rejection" fullWidth
            value={filters.rejection}
            onChange={handleChange('rejection')}
            size="medium"
            sx={{ minWidth: 120 }}
          >
            <MenuItem value="">All Rejections</MenuItem>
            {rejectionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Employee */}
      {employeeOptions && (
        <Grid item>
          <TextField
            select label="Employee" fullWidth
            value={filters.employee}
            onChange={handleChange('employee')}
            size="medium"
            sx={{ minWidth: 120 }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon sx={{ color: iconColor }} />
                </InputAdornment>
              )
            }}
          >
            <MenuItem value="">All Employees</MenuItem>
            {employeeOptions.map(e => <MenuItem key={e} value={e}>{e}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Door */}
      {doorOptions && (
        <Grid item>
          <TextField
            select label="Door" fullWidth
            value={filters.door}
            onChange={handleChange('door')}
            size="medium"
            sx={{ minWidth: 120 }}
          >
            <MenuItem value="">All Doors</MenuItem>
            {doorOptions.map(d => <MenuItem key={d} value={d}>{d}</MenuItem>)}
          </TextField>
        </Grid>
      )}
    </Grid>
  );
}




// src/pages/Dashboard.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container, Button } from '@mui/material';
import { useTheme } from '@mui/material/styles'; // <-- added
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';
import html2canvas from 'html2canvas';
const PptxGenJS = require('pptxgenjs');
import Footer from '../components/Footer';
import Navbar from '../components/Navbar'; // header

// ... helper functions (unchanged)

export default function Dashboard() {
  const theme = useTheme(); // <-- added
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '', location: '', month: '', date: '', priority: ''
  });

  const dashRef   = useRef();
  const cardsRef  = useRef();
  const chartsRef = useRef();

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);

  // dropdown options (unchanged)
  // filtered base (unchanged)
  // filtered summary (unchanged)

  if (!summary) return <Typography>Loading dashboard…</Typography>;

  const exportSection = async (element, fileName = 'Full_Dashboard.pptx') => {
    const ppt = new PptxGenJS();
    const slide = ppt.addSlide();
    slide.addImage({ data: imgData, x: 0, y: 0, w: '100%', h: '100%' });
    await ppt.writeFile({ fileName });
  };

  return (
    <>
      <Navbar />

      <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }} ref={dashRef}>
        <Container maxWidth={false} sx={{ py: 2 }}>
          {/* Filters + Export Buttons */}
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 1,
            mb: 2,
            backgroundColor: theme.palette.mode === 'dark' ? '#333' : '#FFD100',
            color: theme.palette.mode === 'dark' ? '#fff' : '#000',
            padding: 1,
            borderRadius: 1,
            boxShadow: 1
          }}>
            <Filters
              filters={filters} setFilters={setFilters}
              regionOptions={regionOptions}
              locationOptions={locationOptions}
              monthOptions={monthOptions}
              priorityOptions={priorityOptions}
            />
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flexShrink: 0 }}>
              <Button variant="contained" size="small" onClick={() => exportSection(dashRef.current, 'Full_Dashboard.pptx')}>
                Export Dashboard PPT
              </Button>
              <Button variant="outlined" size="small" onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}>
                Export Cards
              </Button>
              <Button variant="outlined" size="small" onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}>
                Export Charts
              </Button>
            </Box>
          </Box>

          {/* Cards */}
          <Box ref={cardsRef} sx={{ mb: 1.5 }}>
            <AlarmCard
              summary={filteredSummary}
              rawAlarms={filtered}
              filters={filters}
            />
          </Box>

          {/* Charts */}
          <Box ref={chartsRef} sx={{ mb: 1.5 }}>
            <SummaryCards
              summary={filteredSummary}
              filters={filters}
              rawAlarms={filtered}
            />
          </Box>

          <Container maxWidth={false} sx={{ py: 0 }}></Container>
          <Footer />
        </Container>
      </Box>
    </>
  );
}








Read both file and add theme palette mode and give me Updated file carefully. Dont make another channges in this file

File 1


// src/pages/Dashboard.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container, Button } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';
import html2canvas from 'html2canvas';
const PptxGenJS = require('pptxgenjs');
import Footer from '../components/Footer';


// helper: convert "01-Apr-25" → "2025-04-01"
function toISODate(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  const monthNames = {
    Jan: '01', Feb: '02', Mar: '03', Apr: '04',
    May: '05', Jun: '06', Jul: '07', Aug: '08',
    Sep: '09', Oct: '10', Nov: '11', Dec: '12'
  };
  const mm = monthNames[monAbbr] || '01';
  const yyyy = `20${yy}`;
  return `${yyyy}-${mm}-${d.padStart(2, '0')}`;
}

// helper: format month/year for dropdown (e.g. "Apr 25")
function formatMonthYear(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  return `${monAbbr} ${yy}`;
}

// replace header with Navbar
import Navbar from '../components/Navbar';

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '', location: '', month: '', date: '', priority: ''
  });

  const dashRef   = useRef();
  const cardsRef  = useRef();
  const chartsRef = useRef();

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);

  // 1️⃣ dropdown options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [],
    [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms.filter(a => a.Region === filters.region).map(a => a.Location)
        ))
      : [],
    [rawAlarms, filters.region]
  );
  const monthOptions = useMemo(() => {
    const all = rawAlarms
      .filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      )
      .map(a => formatMonthYear(a.Date));
    return Array.from(new Set(all))
      .sort((a, b) => {
        const [mA, yA] = a.split(' ');
        const [mB, yB] = b.split(' ');
        const dateA = new Date(`20${yA}-${mA}-01`);
        const dateB = new Date(`20${yB}-${mB}-01`);
        return dateA - dateB;
      });
  }, [rawAlarms, filters.region, filters.location]);

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // 2️⃣ filtered base
  const filtered = useMemo(() => (
    rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)              return false;
      if (filters.location && a.Location !== filters.location)            return false;
      if (filters.month    && formatMonthYear(a.Date) !== filters.month)  return false;
      if (filters.date     && toISODate(a.Date) !== filters.date)         return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    })
  ), [rawAlarms, filters]);

  // 3️⃣ filteredSummary for cards
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };

    if (filters.region) {
      fs.regionWise   = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(l => !filters.location || l === filters.location)
        .forEach(l => {
          fs.locationWise[l] = summary.locationWise[l];
        });
    }

    if (filters.month) {
      const mCount = filtered.filter(a => formatMonthYear(a.Date) === filters.month).length;
      fs.monthWise = { [filters.month]: { count: mCount } };
    } else {
      fs.monthWise = {};
    }

    const opCounts = filtered.reduce((c, a) => {
      const op = a['Name of Person Attending Alarms (First, Last Name)'] || 'Unknown';
      c[op] = (c[op] || 0) + 1;
      return c;
    }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k, v]) => [k, { count: v }])
    );

    return fs;
  }, [summary, filtered, filters, locationOptions]);


  if (!summary) return <Typography>Loading dashboard…</Typography>;


  // COMMON export logic
  const exportSection = async (element, fileName = 'Full_Dashboard.pptx') => {
    const ppt = new PptxGenJS();
    const slide = ppt.addSlide();
    slide.addImage({ data: imgData, x: 0, y: 0, w: '100%', h: '100%' });
    await ppt.writeFile({ fileName });
  };


  return (
    <>
      <Navbar />
  

      <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }} ref={dashRef}>
        {/* Header removed: now in <Navbar /> */}

<Container maxWidth={false} sx={{ py: 2 }}>
  {/* Filters + Export Buttons */}
  <Box sx={{
    display: 'flex',
    alignItems: 'center',
    gap: 1,
    mb: 2,
    backgroundColor: '#FFD100',
    padding: 1,
    borderRadius: 1,
    boxShadow: 1
  }}>
    <Filters
      filters={filters} setFilters={setFilters}
      regionOptions={regionOptions}
      locationOptions={locationOptions}
      monthOptions={monthOptions}
      priorityOptions={priorityOptions}
    />
    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flexShrink: 0 }}>
      <Button variant="contained" size="small" onClick={() => exportSection(dashRef.current, 'Full_Dashboard.pptx')}>
        Export Dashboard PPT
      </Button>
      <Button variant="outlined" size="small" onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}>
        Export Cards
      </Button>
      <Button variant="outlined" size="small" onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}>
        Export Charts
      </Button>
    </Box>
  </Box>


          {/* Cards (no more export button here) */}
          <Box ref={cardsRef} sx={{ mb: 1.5 }}>
            <AlarmCard
              summary={filteredSummary}
              rawAlarms={filtered}
              filters={filters}
            />
          </Box>

          {/* Charts (no more export button here) */}
          <Box ref={chartsRef} sx={{ mb: 1.5 }}>
            <SummaryCards
              summary={filteredSummary}
              filters={filters}
              rawAlarms={filtered}
            />
          </Box>

     <Container maxWidth={false} sx={{ py: 0 }}>
        {/* ...existing content... */}
        </Container>

        <Footer />
        </Container>
      </Box>
    </>
  );
}




File 2


import React from 'react';
import {
  TextField,
  MenuItem,
  Grid,
  InputAdornment
} from '@mui/material';
import PublicIcon from '@mui/icons-material/Public';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import EventIcon from '@mui/icons-material/Event';
import SearchIcon from '@mui/icons-material/Search';
import PriorityHighIcon from '@mui/icons-material/PriorityHigh';

export default function Filters({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = [],
  monthOptions,
  employeeOptions,
  doorOptions,
  priorityOptions,
  rejectionOptions
}) {
  const handleChange = field => e => {
    const value = e.target.value;
    setFilters(prev => {
      const next = { ...prev, [field]: value };
      if (field === 'region') {
        next.location = '';
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'location') {
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'month') {
        next.date = '';
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'date') {
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'priority') {
        next.rejection = '';
      }
      if (field === 'door') {
        next.rejection = '';
      }
      return next;
    });
  };

  return (
    <Grid container spacing={1} alignItems="center" sx={{ mb: 0 }}>
      {/* Region */}
      <Grid item>
        <TextField
          select label="Region" fullWidth
          value={filters.region}
          onChange={handleChange('region')}
          size="medium"
          sx={{minWidth:120}}
          InputProps={{ style:{color:'inherit'}, startAdornment: <InputAdornment position="start"><PublicIcon/></InputAdornment> }}
      
      >
          <MenuItem value="">All Regions</MenuItem>
          {regionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Location */}
      <Grid item>
        <TextField
          select label="Location" fullWidth
          value={filters.location}
          onChange={handleChange('location')}
          size="medium"
          sx={{minWidth:120}}
          disabled={!filters.region}
          InputProps={{ style:{color:'inherit'}, startAdornment: <InputAdornment position="start"><LocationOnIcon/></InputAdornment> }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(l => <MenuItem key={l} value={l}>{l}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Month */}
      {monthOptions && (
        <Grid item>
          <TextField
            select label="Month" fullWidth
            value={filters.month}
            onChange={handleChange('month')}
             size="medium"
          sx={{minWidth:120}}
            InputProps={{ style:{color:'inherit'}, startAdornment: <InputAdornment position="start"><CalendarMonthIcon/></InputAdornment> }}
          >
            <MenuItem value="">All Months</MenuItem>
            {monthOptions.map(m => <MenuItem key={m} value={m}>{m}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Date as calendar picker */}
      {filters.hasOwnProperty('date') && (
        <Grid item>
          <TextField
            label="Date"
            type="date"
            fullWidth
            value={filters.date}
            onChange={handleChange('date')}
            size="medium"
          sx={{minWidth:120}}
            InputLabelProps={{ shrink: true }}
            InputProps={{ style:{color:'inherit'}, startAdornment: <InputAdornment position="start"><EventIcon/></InputAdornment> }}
          />
        </Grid>
      )}

      {/* Priority */}
      {priorityOptions && (
        <Grid item>
          <TextField
            select label="Priority" fullWidth
            value={filters.priority}
            onChange={handleChange('priority')}
            size="medium"
             sx={{minWidth:120}}
            InputProps={{ style:{color:'inherit'}, startAdornment: <InputAdornment position="start"><PriorityHighIcon/></InputAdornment> }}
          >
            <MenuItem value="">All Priorities</MenuItem>
            {priorityOptions.map(p => <MenuItem key={p} value={p}>{p}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Rejection */}
      {rejectionOptions && (
        <Grid item>
          <TextField
            select label="Rejection" fullWidth
            value={filters.rejection}
            onChange={handleChange('rejection')}
             size="medium"
             sx={{minWidth:120}}
          >
            <MenuItem value="">All Rejections</MenuItem>
            {rejectionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Employee */}
      {employeeOptions && (
        <Grid item>
          <TextField
            select label="Employee" fullWidth
            value={filters.employee}
            onChange={handleChange('employee')}
             size="medium"
             sx={{minWidth:120}}
            InputProps={{ startAdornment: <InputAdornment position="start"><SearchIcon/></InputAdornment> }}
          >
            <MenuItem value="">All Employees</MenuItem>
            {employeeOptions.map(e => <MenuItem key={e} value={e}>{e}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Door */}
      {doorOptions && (
        <Grid item>
          <TextField
            select label="Door" fullWidth
            value={filters.door}
            onChange={handleChange('door')}
             size="medium"
             sx={{minWidth:120}}
          >
            <MenuItem value="">All Doors</MenuItem>
            {doorOptions.map(d => <MenuItem key={d} value={d}>{d}</MenuItem>)}
          </TextField>
        </Grid>
      )}
    </Grid>
  );
}



