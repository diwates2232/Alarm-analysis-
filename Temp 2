import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary }) {
  if (!summary) return null;

  return (
    <Grid container spacing={2} sx={{ mb: 3 }}>
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Total Alarms
            </Typography>
            <Typography variant="h4">
              {summary.totalAlarms}
            </Typography>
          </CardContent>
        </Card>
      </Grid>
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Response Sent %
            </Typography>
            <Typography variant="h4">
              {summary.responseSentPercentage}
            </Typography>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
}









import React, { useEffect, useRef } from 'react';
import Chart from 'chart.js/auto/chart.js';

const defaultColors = [
  '#8884d8',
  '#82ca9d',
  '#ffc658',
  '#ff7f50',
  '#a29bfe',
  '#20c997',
  '#fd7e14',
  '#6c757d',
];

export default function MyChart({ 
  type = 'bar',
  data, 
  options = {}, 
  width = '100%', 
  height = 400 
}) {
  const canvasRef = useRef(null);
  const chartRef  = useRef(null);

  useEffect(() => {
    if (!canvasRef.current) return;
    const ctx = canvasRef.current.getContext('2d');

    if (chartRef.current) {
      chartRef.current.destroy();
    }

    const chartData = {
      labels: data.labels,
      datasets: [{
        label: data.label || '',
        data: data.values,
        backgroundColor: data.bgColors || defaultColors.slice(0, data.values.length),
        borderWidth: 1,
      }],
    };

    chartRef.current = new Chart(ctx, {
      type,
      data: chartData,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        ...options,
        scales: {
          x: { beginAtZero: true, ...(options.scales?.x || {}) },
          y: { beginAtZero: true, ...(options.scales?.y || {}) },
        },
      },
    });

    return () => {
      if (chartRef.current) chartRef.current.destroy();
    };
  }, [type, data, options]);

  return (
    <div style={{ width, height }}>
      <canvas ref={canvasRef} />
    </div>
  );
}






import React from 'react';
import { TextField, MenuItem } from '@mui/material';

const Filters = ({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = []
}) => {
  const handleChange = (field) => (e) =>
    setFilters(prev => ({
      ...prev,
      [field]: e.target.value,
      ...(field === 'region' && { location: '' })
    }));

  return (
    <div style={{ display: 'flex', gap: '1rem', marginBottom: 16 }}>
      <TextField
        select
        label="Region"
        value={filters.region}
        onChange={handleChange('region')}
        style={{ minWidth: 150 }}
      >
        <MenuItem value="">Global</MenuItem>
        {regionOptions.map(region => (
          <MenuItem key={region} value={region}>
            {region}
          </MenuItem>
        ))}
      </TextField>

      {filters.region && (
        <TextField
          select
          label="Location"
          value={filters.location}
          onChange={handleChange('location')}
          style={{ minWidth: 200 }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(loc => (
            <MenuItem key={loc} value={loc}>
              {loc}
            </MenuItem>
          ))}
        </TextField>
      )}
    </div>
  );
};

export default Filters;






import React from 'react';
import './SummaryCards.css';
import MyChart from './Chart';
import { Card, CardContent, Typography, Grid } from '@mui/material';

const COLORS = [
  '#007bff', '#28a745', '#ffc107',
  '#dc3545', '#6f42c1', '#17a2b8',
  '#fd7e14', '#20c997', '#6c757d',
  '#6610f2',
];

export default function SummaryCards({ summary, filters }) {
  if (!summary) return null;

  const makeData = obj => {
    const labels = Object.keys(obj);
    const values = labels.map(lbl => obj[lbl].count);
    const bg     = labels.map((_, i) => COLORS[i % COLORS.length]);
    return { labels, values, bg };
  };

  const partitionObj = !filters.region
    ? summary.regionWise
    : summary.locationWise;

  const charts = [
    { key: 'priorityWise',      title: 'Priority Wise',      type: 'pie' },
    { key: 'rejectionTypeWise', title: 'Rejection Type Wise', type: 'pie' },
    { key: 'operatorWise',      title: 'Operator Wise',      type: 'bar' },
    { key: 'monthWise',         title: 'Month Wise',         type: 'bar' },
    filters.region && { key: 'locationWise', title: 'Location Wise', type: 'pie' }
  ].filter(Boolean);

  return (
    <div className="summary-container">
      <Grid container spacing={2} sx={{ mb: 4, justifyContent: 'center' }}>
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {!filters.region ? 'Global Partition' : `${filters.region} Partition`}
              </Typography>
              <MyChart
                type="doughnut"
                data={makeData(partitionObj)}
                height={300}
              />
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Grid container spacing={2}>
        {charts.map(({ key, title, type }) => {
          const obj = summary[key];
          if (!obj || Object.keys(obj).length === 0) return null;
          return (
            <Grid item xs={12} md={6} key={key}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    {title}
                  </Typography>
                  <MyChart
                    type={type}
                    data={makeData(obj)}
                    height={250}
                  />
                </CardContent>
              </Card>
            </Grid>
          );
        })}
      </Grid>
    </div>
  );
}









import React, { useEffect, useState, useMemo } from 'react';
import { Container, Typography } from '@mui/material';
import Filters      from '../components/Filters';
import SummaryCards from '../components/SummaryCards';
import AlarmCard    from '../components/AlarmCard';
import { getAlarmSummary, getRawAlarms } from '../services/api';

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({ region: '', location: '' });

  useEffect(() => {
    getAlarmSummary()
      .then(res => setSummary(res.data))
      .catch(console.error);
    getRawAlarms()
      .then(res => setRawAlarms(res.data))
      .catch(console.error);
  }, []);

  const regionOptions = summary ? Object.keys(summary.regionWise) : [];

  const locationOptions = useMemo(() => {
    if (!filters.region) return [];
    return Array.from(new Set(
      rawAlarms
        .filter(a => a.Region === filters.region)
        .map(a => a.Location)
    ));
  }, [rawAlarms, filters.region]);

  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };
    if (filters.region) {
      fs.regionWise = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(loc => !filters.location || loc === filters.location)
        .forEach(loc => {
          fs.locationWise[loc] = summary.locationWise[loc];
        });
    }
    return fs;
  }, [summary, filters, locationOptions]);

  if (!summary) {
    return <Typography>Loading dashboardâ€¦</Typography>;
  }

  return (
    <Container sx={{ py: 4 }}>
      <Typography variant="h4" gutterBottom>
        Alarm Analysis Dashboard
      </Typography>

      <Filters
        filters={filters}
        setFilters={setFilters}
        regionOptions={regionOptions}
        locationOptions={locationOptions}
      />

      <AlarmCard summary={summary} />

      <SummaryCards
        summary={filteredSummary}
        filters={filters}
      />

      {/* <AlarmsTable data={rawAlarms} /> */}
    </Container>
  );
}






























i have update above files as per given code still we are getting this erros

C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend>npm start

> alarm-frontend@0.1.0 start
> craco start

craco:  *** Cannot find ESLint loader (eslint-loader). ***
(node:31528) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: 'onAfterSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:31528) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: 'onBeforeSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
Starting the development server...
Failed to compile.

Module not found: Error: Cannot find file: 'auto.js' does not match the corresponding name on disk: '.\node_modules\Chart.js\auto\chart.js'.
ERROR in ./src/components/Chart.js 90:0-34
Module not found: Error: Cannot find file: 'auto.js' does not match the corresponding name on disk: '.\node_modules\Chart.js\auto\chart.js'.

ERROR in ./node_modules/react-dom/cjs/react-dom-client.development.js 13308:37-44
Module not found: Error: Can't resolve 'process/browser' in 'C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\react-dom\cjs'

ERROR in ./node_modules/react/cjs/react.development.js 450:37-44
Module not found: Error: Can't resolve 'process/browser' in 'C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\react\cjs'

ERROR in ./node_modules/webpack-dev-server/client/modules/logger/index.js 266:43-50
Module not found: Error: Can't resolve 'process/browser' in 'C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack-dev-server\client\modules\logger'

ERROR in ./node_modules/axios/lib/utils.js 632:91-98
Module not found: Error: Can't resolve 'process/browser' in 'C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\axios\lib'

ERROR in ./node_modules/react-router/dist/development/chunk-BAXFHI7N.mjs 8839:13-20
Module not found: Error: Can't resolve 'process/browser' in 'C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\react-router\dist\development'

ERROR in ./node_modules/xlsx/xlsx.mjs 177:49-56
Module not found: Error: Can't resolve 'process/browser' in 'C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\xlsx'

ERROR in ./node_modules/react-dom/cjs/react-dom-client.development.js
Cannot read properties of undefined (reading 'module')

ERROR in ./node_modules/react/cjs/react.development.js
Cannot read properties of undefined (reading 'module')

ERROR in ./node_modules/webpack-dev-server/client/modules/logger/index.js
Cannot read properties of undefined (reading 'module')

ERROR in ./node_modules/axios/lib/utils.js
Cannot read properties of undefined (reading 'module')

ERROR in ./node_modules/react-router/dist/development/chunk-BAXFHI7N.mjs
Cannot read properties of undefined (reading 'module')

ERROR in ./node_modules/xlsx/xlsx.mjs
Cannot read properties of undefined (reading 'module')

webpack compiled with 13 errors
Watchpack Error (initial scan): Error: ENOTDIR: not a directory, scandir 'C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\process\browser.js'
