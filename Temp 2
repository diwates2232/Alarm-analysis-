import React from 'react';
import { TextField, MenuItem, Grid, InputAdornment } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import PublicIcon from '@mui/icons-material/Public';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import EventIcon from '@mui/icons-material/Event';
import SearchIcon from '@mui/icons-material/Search';
import PriorityHighIcon from '@mui/icons-material/PriorityHigh';

export default function Filters({ filters, setFilters, regionOptions = [], locationOptions = [], monthOptions, employeeOptions, doorOptions, priorityOptions, rejectionOptions }) {
  const theme = useTheme();
  const iconColor = theme.palette.mode === 'dark' ? '#fff' : '#000';

  // handleChange unchanged...

  return (
    <Grid container spacing={1} alignItems="center" sx={{ mb: 0 }}>
      {/* Region */}
      <Grid item>
        <TextField
          select label="Region" fullWidth
          value={filters.region}
          onChange={handleChange('region')}
          size="medium"
          sx={{ minWidth: 120, '& .MuiInputBase-root': { color: iconColor } }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <PublicIcon sx={{ color: iconColor }} />
              </InputAdornment>
            )
          }}
        >
          <MenuItem value="">All Regions</MenuItem>
          {regionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
        </TextField>
      </Grid>
      {/* ... other fields updated similarly ... */}
    </Grid>
  );
}















import React, { useMemo } from 'react';
import { useTheme } from '@mui/material/styles';
import { DataGrid } from '@mui/x-data-grid';
import { Button, Typography } from '@mui/material';
import * as XLSX from 'xlsx';

const AlarmsTable = ({ alarms = [], maxRows = 10, tableType = 'employee' }) => {
  const theme = useTheme();
  const isDark = theme.palette.mode === 'dark';
  const headerColor = isDark ? '#fff' : '#000';
  const gridBg = isDark ? '#1e1e1e' : '#fafafa';

  const exportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(alarms);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Alarms');
    XLSX.writeFile(wb, 'alarms.xlsx');
  };

  // ... employeeStats, doorStats, rawRows unchanged ...

  if (!alarms.length) {
    return (
      <Typography variant="h6" align="center" sx={{ mt: 4, color: headerColor }}>
        No alarm records to display.
      </Typography>
    );
  }

  const commonProps = {
    pageSize: maxRows,
    rowsPerPageOptions: [maxRows],
    autoHeight: true,
    sx: {
      bgcolor: gridBg,
      '.MuiDataGrid-cell, .MuiDataGrid-columnHeaders': {
        color: headerColor
      },
      '.MuiDataGrid-columnSeparator': {
        display: 'none'
      }
    }
  };

  return (
    <>
      {tableType === 'employee' && (
        <DataGrid rows={employeeStats} columns={empColumns} {...commonProps} />
      )}
      {tableType === 'door' && (
        <DataGrid
          rows={doorStats}
          columns={doorColumns}
          pageSize={Math.min(5, maxRows)}
          rowsPerPageOptions={[Math.min(5, maxRows)]}
          autoHeight
          sx={commonProps.sx}
        />
      )}
      {tableType === 'detailed' && (
        <>
          <Button
            variant="contained"
            sx={{ mb: 2, backgroundColor: isDark ? '#FFD100' : '#000', color: isDark ? '#000' : '#FFD100' }}
            onClick={exportToExcel}
          >
            Export to Excel
          </Button>
          <DataGrid rows={rawRows} columns={rawColumns} {...commonProps} />
        </>
      )}
    </>
  );
};

export default AlarmsTable;














import React from 'react';
import { useTheme } from '@mui/material/styles';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary, rawAlarms, filters }) {
  const theme = useTheme();
  const isDark = theme.palette.mode === 'dark';
  if (!summary) return null;

  const formatMonthYear = dateStr => {
    const [ , mon, yy ] = dateStr.split('-');
    return `${mon} ${yy}`;
  };

  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                         return false;
    if (filters.location && a.Location !== filters.location)                       return false;
    if (filters.month    && formatMonthYear(a.Date) !== filters.month)             return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)     return false;
    return true;
  });

  const totalAlarms = filtered.length;
  const normalize = str => (str || '').toString().trim().toLowerCase();
  const responseSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'response sent'
  ).length;
  const notSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'not sent'
  ).length;
  const reoccurredCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'yes' &&
    normalize(a['Action Taken']) === 'reoccured'
  ).length;
  const responseSentPercentage = totalAlarms
    ? `${((responseSentCount / totalAlarms) * 100).toFixed(2)}%`
    : '0%';

  const cardBg = isDark ? '#555' : '#FFD100';
  const cardColor = isDark ? '#fff' : '#000';

  return (
    <Grid container spacing={1} sx={{ mb: 1.5 }}>
      {[
        ['Total Alarms', totalAlarms],
        ['Response Sent', responseSentCount],
        ['Not Sent', notSentCount],
        ['Re-occurred', reoccurredCount],
        ['Response Sent %', responseSentPercentage]
      ].map(([label, value], idx) => (
        <Grid key={idx} item xs={3} sm={1} md={1.5}>
          <Card sx={{ backgroundColor: cardBg, color: cardColor }}>
            <CardContent>
              <Typography variant="subtitle1">{label}</Typography>
              <Typography variant="h4">{value}</Typography>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
}









File 1


// src/components/AlarmCard.js

import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary, rawAlarms, filters }) {
  if (!summary) return null;

  // helper: turn "01-Apr-25" → "Apr 25"
  const formatMonthYear = dateStr => {
    const [ , mon, yy ] = dateStr.split('-');
    return `${mon} ${yy}`;
  };

  // 1) apply all filters (region, location, month, priority)
  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                         return false;
    if (filters.location && a.Location !== filters.location)                       return false;
    if (filters.month    && formatMonthYear(a.Date) !== filters.month)             return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)     return false;
    return true;
  });

  const totalAlarms = filtered.length;

  // normalize helper
  const normalize = str => (str || '').toString().trim().toLowerCase();

  // 2) counts per your rules
  const responseSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'response sent'
  ).length;

  const notSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'not sent'
  ).length;

  const reoccurredCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'yes' &&
    normalize(a['Action Taken']) === 'reoccured'
  ).length;

  const responseSentPercentage = totalAlarms
    ? `${((responseSentCount / totalAlarms) * 100).toFixed(2)}%`
    : '0%';

  return (
    <Grid container spacing={1} sx={{ mb: 1.5 }}>
      {/* Total Alarms */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Total Alarms</Typography>
          <Typography variant="h4">{totalAlarms}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Response Sent */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Response Sent</Typography>
          <Typography variant="h4">{responseSentCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Not Sent */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Not Sent</Typography>
          <Typography variant="h4">{notSentCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Re-occurred */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Re-occurred</Typography>
          <Typography variant="h4">{reoccurredCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Response Sent % */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Response Sent %</Typography>
          <Typography variant="h4">{responseSentPercentage}</Typography>
        </CardContent></Card>
      </Grid>
    </Grid>
  );
}



File 2



// src/components/AlarmsTable.js

import React, { useMemo } from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { Button, Typography } from '@mui/material';
import * as XLSX from 'xlsx';

const AlarmsTable = ({
  alarms = [],
  maxRows = 10,
  tableType = 'employee'
}) => {
  // Excel export
  const exportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(alarms);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Alarms');
    XLSX.writeFile(wb, 'alarms.xlsx');
  };

  // 1) Employee stats with lastAction and ID
  const employeeStats = useMemo(() => {
    const stats = {};
    alarms.forEach(a => {
      const emp = a['Employee Name'] || 'Unknown';
      const empId = a['Employee ID No'] ?? '';
      const dt = a.Date + ' ' + a['Time of  Alarm (Local time)'];
      if (!stats[emp]) {
        stats[emp] = {
          total: 0,
          types: new Set(),
          doorRej: {},
          lastDt: dt,
          lastRegion: a.Region,
          lastLocation: a.Location,
          lastAction: a['Action Taken'],
          employeeId: empId
        };
      }
      const e = stats[emp];
      e.total += 1;
      e.types.add(a.Rejection);
      const drKey = `${a.Door}::${a.Rejection}`;
      e.doorRej[drKey] = (e.doorRej[drKey] || 0) + 1;
      if (dt > e.lastDt) {
        e.lastDt = dt;
        e.lastRegion = a.Region;
        e.lastLocation = a.Location;
        e.lastAction = a['Action Taken'];
        e.employeeId = empId;
      }
    });

    return Object.entries(stats).map(([emp, s], idx) => {
      const repeats = Object.entries(s.doorRej).filter(([, c]) => c > 1);
      let topDoor = '', topCount = 0;
      if (repeats.length) {
        const [key, cnt] = repeats.reduce((a, b) => a[1] > b[1] ? a : b);
        [topDoor] = key.split('::');
        topCount = cnt;
      }
      const [lastDate, lastTime] = s.lastDt.split(' ');
      return {
        id: idx,
        srNo: idx + 1,
        employeeId: s.employeeId,         // NEW
        lastDate,
        lastTime,
        location: s.lastLocation,
        region: s.lastRegion,
        employee: emp,
        lastAction: s.lastAction,
        total: s.total,
        repeatedDoor: topDoor,
        repeatCount: topCount,
        rejectionTypes: Array.from(s.types).join(', ')
      };
    });
  }, [alarms]);

  // 2) Door stats
  const doorStats = useMemo(() => {
    const d = {};
    alarms.forEach(a => {
      const door = a.Door || 'Unknown';
      if (!d[door]) d[door] = { total: 0, rejections: {} };
      d[door].total += 1;
      d[door].rejections[a.Rejection] = (d[door].rejections[a.Rejection]||0) + 1;
    });
    return Object.entries(d)
      .filter(([, s]) => s.total > 1)
      .map(([door, s], idx) => ({
        id: idx,
        door,
        total: s.total,
        rejectionCounts: Object.entries(s.rejections)
          .map(([t,c]) => `${t}:${c}`)
          .join(', ')
      }));
  }, [alarms]);

  // 3) Detailed raw rows
  const rawRows = useMemo(() =>
    alarms.map((a,i) => ({ id: i, ...a })), [alarms]
  );

  if (!alarms.length) {
    return (
      <Typography variant="h6" align="center" sx={{ mt: 4 }}>
        No alarm records to display.
      </Typography>
    );
  }

  // Columns for each table
  const empColumns = [
    { field: 'srNo', headerName: 'Sr. No', width: 80 },
    { field: 'employeeId', headerName: 'Employee ID', width: 120 },  // NEW
    { field: 'lastDate', headerName: 'Date', width: 120 },
    { field: 'lastTime', headerName: 'Time', width: 120 },
    { field: 'location', headerName: 'Location', width: 150 },
    { field: 'region', headerName: 'Region', width: 120 },
    { field: 'employee', headerName: 'Employee Name', width: 180 },
    { field: 'lastAction', headerName: 'Action Taken', width: 180 },
    { field: 'total', headerName: 'Total Alarms', width: 130 },
    { field: 'repeatedDoor', headerName: 'Repeated Door', width: 200 },
    { field: 'repeatCount', headerName: 'Repeat Count', width: 130 },
    { field: 'rejectionTypes', headerName: 'Types of Rejection', width: 300 },
  ];

  const doorColumns = [
    { field: 'door', headerName: 'Door', width: 300 },
    { field: 'total', headerName: 'Total Alarms', width: 150 },
    { field: 'rejectionCounts', headerName: 'Rejection Counts', width: 400 }
  ];

  const rawColumns = [
    { field: 'Sr. No', headerName: 'Sr. No', width: 90 },
    { field: 'Date', headerName: 'Date', width: 120 },
    { field: 'Time of  Alarm (Local time)', headerName: 'Time', width: 150 },
    { field: 'Employee ID No', headerName: 'Employee ID', width: 150 },  // NEW
    { field: 'Type of Alarm', headerName: 'Type', width: 150 },
    { field: 'Door', headerName: 'Door', width: 250 },
    { field: 'Location', headerName: 'Location', width: 150 },
    { field: 'Region', headerName: 'Region', width: 120 },
    { field: 'Rejection', headerName: 'Rejection', width: 180 },
    { field: 'CCURE Incident Priority', headerName: 'Priority', width: 150 },
    {
      field: 'Name of Person Attending Alarms (First, Last Name)',
      headerName: 'Operator', width: 200
    },
    { field: 'Action Taken', headerName: 'Action Taken', width: 150 },
    { field: ' Time Taken (Min)', headerName: 'Time Taken (Min)', width: 150 }
  ];

  return (
    <div style={{ width: '100%' }}>
      {tableType === 'employee' && (
        <DataGrid
          rows={employeeStats}
          columns={empColumns}
          pageSize={maxRows}
          rowsPerPageOptions={[maxRows]}
          autoHeight
        />
      )}

      {tableType === 'door' && (
        <DataGrid
          rows={doorStats}
          columns={doorColumns}
          pageSize={Math.min(5, maxRows)}
          rowsPerPageOptions={[Math.min(5, maxRows)]}
          autoHeight
        />
      )}

      {tableType === 'detailed' && (
        <>
          <Button variant="contained" color="primary" onClick={exportToExcel} sx={{ mb: 2 }}>
            Export to Excel
          </Button>
          <DataGrid
            rows={rawRows}
            columns={rawColumns}
            getRowClassName={params =>
              params.row[' Time Taken (Min)'] > 0 ? 'sla-breach' : ''
            }
            pageSize={maxRows}
            rowsPerPageOptions={[10, 20, 50].filter(x => x <= rawRows.length)}
            autoHeight
          />
        </>
      )}
    </div>
  );
};

export default AlarmsTable;




File 3


// // src/components/Filters.js

import React from 'react';
import {
  TextField,
  MenuItem,
  Grid,
  InputAdornment
} from '@mui/material';
import { useTheme } from '@mui/material/styles'; // <-- added
import PublicIcon from '@mui/icons-material/Public';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import EventIcon from '@mui/icons-material/Event';
import SearchIcon from '@mui/icons-material/Search';
import PriorityHighIcon from '@mui/icons-material/PriorityHigh';

export default function Filters({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = [],
  monthOptions,
  employeeOptions,
  doorOptions,
  priorityOptions,
  rejectionOptions
}) {
  const theme = useTheme(); // <-- added
  const iconColor = theme.palette.mode === 'dark' ? '#fff' : '#000'; // <-- added

  const handleChange = field => e => {
    const value = e.target.value;
    setFilters(prev => {
      const next = { ...prev, [field]: value };
      if (field === 'region') {
        next.location = '';
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'location') {
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'month') {
        next.date = '';
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'date') {
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'priority') {
        next.rejection = '';
      }
      if (field === 'door') {
        next.rejection = '';
      }
      return next;
    });
  };

  return (
    <Grid container spacing={1} alignItems="center" sx={{ mb: 0 }}>
      {/* Region */}
      <Grid item>
        <TextField
          select label="Region" fullWidth
          value={filters.region}
          onChange={handleChange('region')}
          size="medium"
          sx={{ minWidth: 120 }}
          InputProps={{
            style: { color: iconColor },
            startAdornment: (
              <InputAdornment position="start">
                <PublicIcon sx={{ color: iconColor }} />
              </InputAdornment>
            )
          }}
        >
          <MenuItem value="">All Regions</MenuItem>
          {regionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Location */}
      <Grid item>
        <TextField
          select label="Location" fullWidth
          value={filters.location}
          onChange={handleChange('location')}
          size="medium"
          sx={{ minWidth: 120 }}
          disabled={!filters.region}
          InputProps={{
            style: { color: iconColor },
            startAdornment: (
              <InputAdornment position="start">
                <LocationOnIcon sx={{ color: iconColor }} />
              </InputAdornment>
            )
          }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(l => <MenuItem key={l} value={l}>{l}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Month */}
      {monthOptions && (
        <Grid item>
          <TextField
            select label="Month" fullWidth
            value={filters.month}
            onChange={handleChange('month')}
            size="medium"
            sx={{ minWidth: 120 }}
            InputProps={{
              style: { color: iconColor },
              startAdornment: (
                <InputAdornment position="start">
                  <CalendarMonthIcon sx={{ color: iconColor }} />
                </InputAdornment>
              )
            }}
          >
            <MenuItem value="">All Months</MenuItem>
            {monthOptions.map(m => <MenuItem key={m} value={m}>{m}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Date */}
      {filters.hasOwnProperty('date') && (
        <Grid item>
          <TextField
            label="Date"
            type="date"
            fullWidth
            value={filters.date}
            onChange={handleChange('date')}
            size="medium"
            sx={{ minWidth: 120 }}
            InputLabelProps={{ shrink: true }}
            InputProps={{
              style: { color: iconColor },
              startAdornment: (
                <InputAdornment position="start">
                  <EventIcon sx={{ color: iconColor }} />
                </InputAdornment>
              )
            }}
          />
        </Grid>
      )}

      {/* Priority */}
      {priorityOptions && (
        <Grid item>
          <TextField
            select label="Priority" fullWidth
            value={filters.priority}
            onChange={handleChange('priority')}
            size="medium"
            sx={{ minWidth: 120 }}
            InputProps={{
              style: { color: iconColor },
              startAdornment: (
                <InputAdornment position="start">
                  <PriorityHighIcon sx={{ color: iconColor }} />
                </InputAdornment>
              )
            }}
          >
            <MenuItem value="">All Priorities</MenuItem>
            {priorityOptions.map(p => <MenuItem key={p} value={p}>{p}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Rejection */}
      {rejectionOptions && (
        <Grid item>
          <TextField
            select label="Rejection" fullWidth
            value={filters.rejection}
            onChange={handleChange('rejection')}
            size="medium"
            sx={{ minWidth: 120 }}
          >
            <MenuItem value="">All Rejections</MenuItem>
            {rejectionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Employee */}
      {employeeOptions && (
        <Grid item>
          <TextField
            select label="Employee" fullWidth
            value={filters.employee}
            onChange={handleChange('employee')}
            size="medium"
            sx={{ minWidth: 120 }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon sx={{ color: iconColor }} />
                </InputAdornment>
              )
            }}
          >
            <MenuItem value="">All Employees</MenuItem>
            {employeeOptions.map(e => <MenuItem key={e} value={e}>{e}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Door */}
      {doorOptions && (
        <Grid item>
          <TextField
            select label="Door" fullWidth
            value={filters.door}
            onChange={handleChange('door')}
            size="medium"
            sx={{ minWidth: 120 }}
          >
            <MenuItem value="">All Doors</MenuItem>
            {doorOptions.map(d => <MenuItem key={d} value={d}>{d}</MenuItem>)}
          </TextField>
        </Grid>
      )}
    </Grid>
  );
}




File 4




// src/components/Navbar.js
import React from 'react';
import {
  AppBar, Toolbar, IconButton,
  Typography, Box, Link
} from '@mui/material';
import {
  Dashboard as DashboardIcon,
  Brightness4,
  Brightness7
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import { useThemeMode } from '../theme';

export default function Navbar() {
  const theme = useTheme();
  const { mode, toggleMode } = useThemeMode();

  return (
    <AppBar position="static" color="default" elevation={1}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>
        {/* Left: Icon + Heading  backgroundColor:'#000' */}
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2,mb:1.5,color:'#FFD100',fontWeight:'bold', }}>


          <DashboardIcon fontSize="large" />
          <Typography variant="h4" sx={{ fontWeight: 600 }}>
            Alarm Analysis Dashboard
          </Typography>
        </Box>

        {/* Right: Navigation + Theme Toggle */}
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1,mb:1.5 }}>
          <Link href="/" underline="none" color="inherit">Dashboard</Link>
          <Link href="/alarms" underline="none" color="inherit">Raw Alarms</Link>
          <IconButton onClick={toggleMode} color="inherit">
            {mode === 'dark' ? <Brightness7 /> : <Brightness4 />}
          </IconButton>
        </Box>
      </Toolbar>
    </AppBar>
  );
}



File 5




// src/pages/RawAlarms.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import {
  Typography,
  Container,
  Grid,
  Box,
  Button,
  Link as MuiLink,
  Card,
  CardContent
} from '@mui/material';
import { useTheme } from '@mui/material/styles';            // ← added
import DashboardIcon from '@mui/icons-material/Dashboard';
import TableChartIcon from '@mui/icons-material/TableChart';
import Filters from '../components/Filters';
import AlarmsTable from '../components/AlarmsTable';
import { getRawAlarms } from '../services/api';
import * as XLSX from 'xlsx';

// helper: convert API "01-Apr-25" → "2025-04-01" (ISO for <input type="date">)
function toISODate(apiDate) {
  const [day, monAbbr, yy] = apiDate.split('-');
  if (!day || !monAbbr || !yy) return '';
  const monthMap = {
    Jan:'01', Feb:'02', Mar:'03', Apr:'04',
    May:'05', Jun:'06', Jul:'07', Aug:'08',
    Sep:'09', Oct:'10', Nov:'11', Dec:'12'
  };
  const mm = monthMap[monAbbr] || '01';
  const yyyy = +yy + 2000;
  return `${yyyy}-${mm}-${day.padStart(2,'0')}`;
}

// helper to format month/year for dropdown, e.g. "Apr-25"
const formatMonthYear = dateStr =>
  new Date(dateStr).toLocaleString('en-US', {
    month: 'short',
    year: '2-digit'
  });

export default function RawAlarms() {
   const theme = useTheme();   
    const isDark = theme.palette.mode === 'dark';
  const headerBg = isDark ? '#1e1e1e' : '#e3f2fd';           // dark vs light header
  const headerColor = isDark ? '#fff' : '#000';    
  const [alarms, setAlarms]   = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    region: '', location: '', door: '', employee: '',
    priority: '', rejection: '', month: '', date: ''
  });
  const [view, setView] = useState('employee');
  const filteredRef = useRef([]);

  // 1️⃣ Filtered alarms
  const filtered = useMemo(() => {
    const f = alarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)       return false;
      if (filters.location && a.Location !== filters.location)     return false;
      if (filters.door     && a.Door     !== filters.door)         return false;
      if (filters.employee && a['Employee Name'] !== filters.employee) return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      if (filters.rejection && a.Rejection !== filters.rejection)   return false;
      if (filters.month    && formatMonthYear(a.Date) !== filters.month) return false;
      if (filters.date     && toISODate(a.Date) !== filters.date)   return false;
      return true;
    });
    filteredRef.current = f;
    return f;
  }, [alarms, filters]);

  useEffect(() => {
    getRawAlarms()
      .then(res => setAlarms(res.data || []))
      .catch(() => setAlarms([]))
      .finally(() => setLoading(false));
  }, []);

  // 2️⃣ Dropdown options
  const regionOptions = useMemo(
    () => Array.from(new Set(alarms.map(a => a.Region))).sort(),
    [alarms]
  );
  const locationOptions = useMemo(
    () => Array.from(new Set(
      alarms.filter(a => !filters.region || a.Region === filters.region)
            .map(a => a.Location)
    )).sort(),
    [alarms, filters.region]
  );
  const doorOptions = useMemo(
    () => Array.from(new Set(
      alarms.filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      ).map(a => a.Door)
    )).sort(),
    [alarms, filters.region, filters.location]
  );
  const employeeOptions = useMemo(
    () => Array.from(new Set(
      alarms.filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      ).map(a => a['Employee Name'])
    )).sort(),
    [alarms, filters.region, filters.location]
  );
  const priorityOptions = useMemo(
    () => Array.from(new Set(alarms.map(a => a['CCURE Incident Priority']))).sort(),
    [alarms]
  );
  const rejectionOptions = useMemo(
    () => Array.from(new Set(alarms.map(a => a.Rejection))).sort(),
    [alarms]
  );
  const monthOptions = useMemo(() => {
    const all = alarms.map(a => formatMonthYear(a.Date));
    return Array.from(new Set(all))
      .sort((a, b) => new Date(a) - new Date(b));
  }, [alarms]);

  if (loading) {
    return (
      <Container maxWidth={false} sx={{ pt: 4 }}>
        <Typography variant="h4">Raw Alarms</Typography>
        <Typography>Loading…</Typography>
      </Container>
    );
  }

  // normalize helper
  const normalize = str => (str || '').toString().trim().toLowerCase();

  // 3️⃣ Summary card counts
  const totalAlarms       = filtered.length;
  const responseSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'response sent'
  ).length;
  const notSentCount      = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'not sent'
  ).length;
  const reoccurredCount   = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'yes' &&
    normalize(a['Action Taken']) === 'reoccured'
  ).length;

  // 4️⃣ Excel export handlers (unchanged)
  const exportEmployee = () => {
    const stats = {};
    filteredRef.current.forEach(a => {
      const emp = a['Employee Name'] || 'Unknown';
      const dt  = `${a.Date} ${a['Time of  Alarm (Local time)']}`;
      if (!stats[emp]) stats[emp] = { total: 0, lastDt: dt, lastAction: a['Action Taken'] };
      stats[emp].total += 1;
      if (dt > stats[emp].lastDt) {
        stats[emp].lastDt     = dt;
        stats[emp].lastAction = a['Action Taken'];
      }
    });
    const rows = Object.entries(stats).map(([employee, s], idx) => ({
      'Sr. No':  idx + 1,
      Employee:  employee,
      Date:      s.lastDt.split(' ')[0],
      Time:      s.lastDt.split(' ')[1],
      'Action Taken': s.lastAction,
      'Total Alarms': s.total
    }));
    const ws = XLSX.utils.json_to_sheet(rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Employee Analysis');
    XLSX.writeFile(wb, 'employee_analysis.xlsx');
  };

  const exportDoor = () => {
    const stats = {};
    filteredRef.current.forEach(a => {
      const door = a.Door || 'Unknown';
      if (!stats[door]) stats[door] = { total: 0 };
      stats[door].total += 1;
    });
    const rows = Object.entries(stats).map(([Door, s], idx) => ({
      'Sr. No': idx + 1,
      Door,
      'Total Alarms': s.total
    }));
    const ws = XLSX.utils.json_to_sheet(rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Door Analysis');
    XLSX.writeFile(wb, 'door_analysis.xlsx');
  };

   return (
    <Container maxWidth={false} sx={{ p: 0, height: '100vh', overflow: 'auto' }}>
      {/* Header */}
      <Box sx={{
        display: 'flex', alignItems: 'center', justifyContent: 'space-between',
        bgcolor: headerBg, color: headerColor,
        p: 2, borderBottom: 1, borderColor: 'divider'
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <TableChartIcon fontSize="large" sx={{ color: headerColor }} />
          <Typography variant="h4" sx={{ color: headerColor }}>
            Raw Alarms Analysis
          </Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <MuiLink href="/" sx={{ display: 'flex', alignItems: 'center', color: headerColor, textDecoration: 'none' }}>
            <DashboardIcon sx={{ mr: .5, color: headerColor }} /> Dashboard
          </MuiLink>
          <MuiLink href="/alarms" sx={{ display: 'flex', alignItems: 'center', color: headerColor, textDecoration: 'none' }}>
            <TableChartIcon sx={{ mr: .5, color: headerColor }} /> Raw Alarms
          </MuiLink>
        </Box>
      </Box>


       {/* Filters */}
      <Box sx={{
        p: 2,
        backgroundColor: isDark ? '#333' : '#FFD100',
        color: isDark ? '#fff' : '#000',
        borderRadius: 1,
        mb: 2
      }}>
        <Filters
          filters={filters}
          setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          doorOptions={doorOptions}
          employeeOptions={employeeOptions}
          priorityOptions={priorityOptions}
          rejectionOptions={rejectionOptions}
          monthOptions={monthOptions}
        />
      </Box>

      {/* Summary Cards */}
      <Grid container spacing={2} sx={{ px: 2, mb: 3 }}>
        {[
          ['Total Alarms', totalAlarms],
          ['Response Sent', responseSentCount],
          ['Not Sent', notSentCount],
          ['Re-occurred', reoccurredCount]
        ].map(([label, val], i) => (
          <Grid key={i} item xs={6} sm={3} md={2}>
            <Card sx={{
              backgroundColor: isDark ? '#555' : '#FFD100',
              color: isDark ? '#fff' : '#000'
            }}>
              <CardContent>
                <Typography variant="subtitle1">{label}</Typography>
                <Typography variant="h4">{val}</Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* View Toggle Buttons */}
      <Box sx={{ p: 2, display: 'flex', gap: 2 }}>
        {['employee','door','detailed'].map(v => (
          <Button
            key={v}
            variant={view === v ? 'contained' : 'outlined'}
            onClick={() => setView(v)}
            sx={{
              backgroundColor: view===v
                ? (isDark ? '#FFD100' : '#000')
                : 'inherit',
              color: view===v
                ? (isDark ? '#000' : '#FFD100')
                : 'inherit'
            }}
          >
            {v.charAt(0).toUpperCase() + v.slice(1)} Analysis
          </Button>
        ))}
      </Box>

      {/* Table & Exports */}
      <Box sx={{ p: 2 }}>
        {view === 'employee' && (
          <>
            <Button variant="contained" onClick={exportEmployee} sx={{ mb: 2 }}>
              Export Employee Analysis
            </Button>
            <AlarmsTable alarms={filtered} maxRows={100} tableType="employee" />
          </>
        )}
        {view === 'door' && (
          <>
            <Button variant="contained" onClick={exportDoor} sx={{ mb: 2 }}>
              Export Door Analysis
            </Button>
            <AlarmsTable alarms={filtered} maxRows={100} tableType="door" />
          </>
        )}
        {view === 'detailed' && (
          <AlarmsTable alarms={filtered} maxRows={100} tableType="detailed" />
        )}
      </Box>
    </Container>
  );
}


