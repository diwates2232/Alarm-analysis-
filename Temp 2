// src/App.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { ThemeModeProvider } from './theme';
import { ThemeProvider, CssBaseline } from '@mui/material';

ReactDOM.render(
  <ThemeModeProvider>
    {theme => (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <App />
      </ThemeProvider>
    )}
  </ThemeModeProvider>,
  document.getElementById('root')
);



// src/pages/Dashboard.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container, Button } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';
import html2canvas from 'html2canvas';
const PptxGenJS = require('pptxgenjs');

// helper: convert "01-Apr-25" → "2025-04-01"
function toISODate(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  const monthNames = {
    Jan: '01', Feb: '02', Mar: '03', Apr: '04',
    May: '05', Jun: '06', Jul: '07', Aug: '08',
    Sep: '09', Oct: '10', Nov: '11', Dec: '12'
  };
  const mm = monthNames[monAbbr] || '01';
  const yyyy = `20${yy}`;
  return `${yyyy}-${mm}-${d.padStart(2, '0')}`;
}

// helper: format month/year for dropdown (e.g. "Apr 25")
function formatMonthYear(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  return `${monAbbr} ${yy}`;
}

// replace header with Navbar
import Navbar from '../components/Navbar';

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '', location: '', month: '', date: '', priority: ''
  });

  const dashRef   = useRef();
  const cardsRef  = useRef();
  const chartsRef = useRef();

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);

  // 1️⃣ dropdown options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [],
    [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms.filter(a => a.Region === filters.region).map(a => a.Location)
        ))
      : [],
    [rawAlarms, filters.region]
  );
  const monthOptions = useMemo(() => {
    const all = rawAlarms
      .filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      )
      .map(a => formatMonthYear(a.Date));
    return Array.from(new Set(all))
      .sort((a, b) => {
        const [mA, yA] = a.split(' ');
        const [mB, yB] = b.split(' ');
        const dateA = new Date(`20${yA}-${mA}-01`);
        const dateB = new Date(`20${yB}-${mB}-01`);
        return dateA - dateB;
      });
  }, [rawAlarms, filters.region, filters.location]);

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // 2️⃣ filtered base
  const filtered = useMemo(() => (
    rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)              return false;
      if (filters.location && a.Location !== filters.location)            return false;
      if (filters.month    && formatMonthYear(a.Date) !== filters.month)  return false;
      if (filters.date     && toISODate(a.Date) !== filters.date)         return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    })
  ), [rawAlarms, filters]);

  // 3️⃣ filteredSummary for cards
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };

    if (filters.region) {
      fs.regionWise   = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(l => !filters.location || l === filters.location)
        .forEach(l => {
          fs.locationWise[l] = summary.locationWise[l];
        });
    }

    if (filters.month) {
      const mCount = filtered.filter(a => formatMonthYear(a.Date) === filters.month).length;
      fs.monthWise = { [filters.month]: { count: mCount } };
    } else {
      fs.monthWise = {};
    }

    const opCounts = filtered.reduce((c, a) => {
      const op = a['Name of Person Attending Alarms (First, Last Name)'] || 'Unknown';
      c[op] = (c[op] || 0) + 1;
      return c;
    }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k, v]) => [k, { count: v }])
    );

    return fs;
  }, [summary, filtered, filters, locationOptions]);


  if (!summary) return <Typography>Loading dashboard…</Typography>;


  // COMMON export logic
  const exportSection = async (element, fileName = 'Full_Dashboard.pptx') => {
    const ppt = new PptxGenJS();
    const slide = ppt.addSlide();
    slide.addImage({ data: imgData, x: 0, y: 0, w: '100%', h: '100%' });
    await ppt.writeFile({ fileName });
  };


  return (
    <>
      <Navbar />

      <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }} ref={dashRef}>
        {/* Header removed: now in <Navbar /> */}

        <Container maxWidth={false} sx={{ py:4 }}>
          {/* Filters + Inline Export Buttons */}
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 2,
            mb: 3
          }}>
            <Filters
              filters={filters} setFilters={setFilters}
              regionOptions={regionOptions}
              locationOptions={locationOptions}
              monthOptions={monthOptions}
              priorityOptions={priorityOptions}
            />
            {/* force no wrap so buttons hug the Priority dropdown */}
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexShrink: 0 }}>
              <Button
                variant="contained" size="small"
                onClick={() => exportSection(dashRef.current, 'Full_Dashboard.pptx')}
              >
                Export Dashboard PPT
              </Button>
              <Button
                variant="outlined" size="small"
                onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}
              >
                Export Cards
              </Button>
              <Button
                variant="outlined" size="small"
                onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}
              >
                Export Charts
              </Button>
            </Box>
          </Box>

          {/* Cards (no more export button here) */}
          <Box ref={cardsRef} sx={{ mb: 4 }}>
            <AlarmCard
              summary={filteredSummary}
              rawAlarms={filtered}
              filters={filters}
            />
          </Box>

          {/* Charts (no more export button here) */}
          <Box ref={chartsRef} sx={{ mb: 4 }}>
            <SummaryCards
              summary={filteredSummary}
              filters={filters}
              rawAlarms={filtered}
            />
          </Box>
        </Container>
      </Box>
    </>
  );
}



file 1

App.js

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import RawAlarms from './pages/RawAlarms';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Dashboard />} />
        <Route path="/alarms" element={<RawAlarms />} />
      </Routes>
    </Router>
  );
}

export default App;


File 2

// src/pages/Dashboard.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container, Button } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';
import html2canvas from 'html2canvas';
// import PptxGenJS from 'pptxgenjs';
 // Use CommonJS‐style require so we get the right constructor
 const PptxGenJS = require('pptxgenjs');

// helper: convert "01-Apr-25" → "2025-04-01"
function toISODate(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  const monthNames = {
    Jan: '01', Feb: '02', Mar: '03', Apr: '04',
    May: '05', Jun: '06', Jul: '07', Aug: '08',
    Sep: '09', Oct: '10', Nov: '11', Dec: '12'
  };
  const mm = monthNames[monAbbr] || '01';
  const yyyy = `20${yy}`;
  return `${yyyy}-${mm}-${d.padStart(2, '0')}`;
}

// helper: format month/year for dropdown (e.g. "Apr 25")
function formatMonthYear(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  return `${monAbbr} ${yy}`;
}

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '', location: '', month: '', date: '', priority: ''
  });

  const dashRef   = useRef();
  const cardsRef  = useRef();
  const chartsRef = useRef();

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);


  // 1️⃣ dropdown options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [],
    [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms.filter(a => a.Region === filters.region).map(a => a.Location)
        ))
      : [],
    [rawAlarms, filters.region]
  );
  const monthOptions = useMemo(() => {
    const all = rawAlarms
      .filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      )
      .map(a => formatMonthYear(a.Date));
    return Array.from(new Set(all))
      .sort((a, b) => {
        const [mA, yA] = a.split(' ');
        const [mB, yB] = b.split(' ');
        const dateA = new Date(`20${yA}-${mA}-01`);
        const dateB = new Date(`20${yB}-${mB}-01`);
        return dateA - dateB;
      });
  }, [rawAlarms, filters.region, filters.location]);

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // 2️⃣ filtered base
  const filtered = useMemo(() => (
    rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)              return false;
      if (filters.location && a.Location !== filters.location)            return false;
      if (filters.month    && formatMonthYear(a.Date) !== filters.month)  return false;
      if (filters.date     && toISODate(a.Date) !== filters.date)         return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    })
  ), [rawAlarms, filters]);

  // 3️⃣ filteredSummary for cards
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };

    if (filters.region) {
      fs.regionWise   = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(l => !filters.location || l === filters.location)
        .forEach(l => {
          fs.locationWise[l] = summary.locationWise[l];
        });
    }

    if (filters.month) {
      const mCount = filtered.filter(a => formatMonthYear(a.Date) === filters.month).length;
      fs.monthWise = { [filters.month]: { count: mCount } };
    } else {
      fs.monthWise = {};
    }

    const opCounts = filtered.reduce((c, a) => {
      const op = a['Name of Person Attending Alarms (First, Last Name)'] || 'Unknown';
      c[op] = (c[op] || 0) + 1;
      return c;
    }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k, v]) => [k, { count: v }])
    );

    return fs;
  }, [summary, filtered, filters, locationOptions]);


  if (!summary) return <Typography>Loading dashboard…</Typography>;

 
    // COMMON export logic
    const exportSection = async (element, fileName = 'Full_Dashboard.pptx') => {


      // Instantiate the PPTX generator
    const ppt = new PptxGenJS();
    // Create a new slide
    const slide = ppt.addSlide();
    // Insert our captured image
    slide.addImage({ data: imgData, x: 0, y: 0, w: '100%', h: '100%' });
    // Save to file
    await ppt.writeFile({ fileName });
  };



  return (
    <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }} ref={dashRef}>
      {/* Header */}
      <Box component="header" sx={{
        display: 'flex', alignItems: 'center', justifyContent: 'space-between',
        borderBottom: '3px solid #1976d2', bgcolor: '#e3f2fd', p:2
      }}>
        <Box sx={{ display:'flex', alignItems:'center', gap:1 }}>
          <DashboardIcon fontSize="large"/>
          <Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{ display:'flex', gap:2 }}>
          <Link to="/">➤ Dashboard</Link>
          <Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{ py:4 }}>
        {/* Filters + Inline Export Buttons */}
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          gap: 2,
          mb: 3
        }}>
          <Filters
            filters={filters} setFilters={setFilters}
            regionOptions={regionOptions}
            locationOptions={locationOptions}
            monthOptions={monthOptions}
            priorityOptions={priorityOptions}
          />
          {/* force no wrap so buttons hug the Priority dropdown */}
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexShrink: 0 }}>
            <Button
              variant="contained" size="small"
              onClick={() => exportSection(dashRef.current, 'Full_Dashboard.pptx')}
            >
              Export Dashboard PPT
            </Button>
            <Button
              variant="outlined" size="small"
              onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}
            >
              Export Cards
            </Button>
            <Button
              variant="outlined" size="small"
              onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}
            >
              Export Charts
            </Button>
          </Box>
        </Box>

        {/* Cards (no more export button here) */}
        <Box ref={cardsRef} sx={{ mb: 4 }}>
          <AlarmCard
            summary={filteredSummary}
            rawAlarms={filtered}
            filters={filters}
          />
        </Box>

        {/* Charts (no more export button here) */}
        <Box ref={chartsRef} sx={{ mb: 4 }}>
          <SummaryCards
            summary={filteredSummary}
            filters={filters}
            rawAlarms={filtered}
          />
        </Box>
      </Container>
    </Box>
  );
}



Read Above deatails File Carefully and add below Logic on both file and Give me Updated js file carefully dont make another changes in my file.

