Read Below files carefully .
There is a few changes in i want to do.
Dont use Diffrent colors to display Chart.
Use Only Colors Which is already mentioned in SummaryCards.js

Issue is there 
Location Wise  -- chart
Month Wise -- chart

this two Charts are are Showing Colours for dot Not Displaying colors for line 
i want Display line in colours.
its important foe this chart.
remenaing chart are uses Colours Succefully.
Make only this Changes and give me Updated js file carefully




file 1
Dashboard.js


import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container, Button } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';
import html2canvas from 'html2canvas';
// import PptxGenJS from 'pptxgenjs';
 // Use CommonJS‐style require so we get the right constructor
 const PptxGenJS = require('pptxgenjs');

// helper: convert "01-Apr-25" → "2025-04-01"
function toISODate(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  const monthNames = {
    Jan: '01', Feb: '02', Mar: '03', Apr: '04',
    May: '05', Jun: '06', Jul: '07', Aug: '08',
    Sep: '09', Oct: '10', Nov: '11', Dec: '12'
  };
  const mm = monthNames[monAbbr] || '01';
  const yyyy = `20${yy}`;
  return `${yyyy}-${mm}-${d.padStart(2, '0')}`;
}

// helper: format month/year for dropdown (e.g. "Apr 25")
function formatMonthYear(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  return `${monAbbr} ${yy}`;
}

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '', location: '', month: '', date: '', priority: ''
  });

  const dashRef   = useRef();
  const cardsRef  = useRef();
  const chartsRef = useRef();

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);


  // 1️⃣ dropdown options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [],
    [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms.filter(a => a.Region === filters.region).map(a => a.Location)
        ))
      : [],
    [rawAlarms, filters.region]
  );
  const monthOptions = useMemo(() => {
    const all = rawAlarms
      .filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      )
      .map(a => formatMonthYear(a.Date));
    return Array.from(new Set(all))
      .sort((a, b) => {
        const [mA, yA] = a.split(' ');
        const [mB, yB] = b.split(' ');
        const dateA = new Date(`20${yA}-${mA}-01`);
        const dateB = new Date(`20${yB}-${mB}-01`);
        return dateA - dateB;
      });
  }, [rawAlarms, filters.region, filters.location]);

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // 2️⃣ filtered base
  const filtered = useMemo(() => (
    rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)              return false;
      if (filters.location && a.Location !== filters.location)            return false;
      if (filters.month    && formatMonthYear(a.Date) !== filters.month)  return false;
      if (filters.date     && toISODate(a.Date) !== filters.date)         return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    })
  ), [rawAlarms, filters]);

  // 3️⃣ filteredSummary for cards
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };

    if (filters.region) {
      fs.regionWise   = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(l => !filters.location || l === filters.location)
        .forEach(l => {
          fs.locationWise[l] = summary.locationWise[l];
        });
    }

    if (filters.month) {
      const mCount = filtered.filter(a => formatMonthYear(a.Date) === filters.month).length;
      fs.monthWise = { [filters.month]: { count: mCount } };
    } else {
      fs.monthWise = {};
    }

    const opCounts = filtered.reduce((c, a) => {
      const op = a['Name of Person Attending Alarms (First, Last Name)'] || 'Unknown';
      c[op] = (c[op] || 0) + 1;
      return c;
    }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k, v]) => [k, { count: v }])
    );

    return fs;
  }, [summary, filtered, filters, locationOptions]);


  // … regionOptions, locationOptions, monthOptions, priorityOptions, filtered, filteredSummary … (unchanged)

  if (!summary) return <Typography>Loading dashboard…</Typography>;

  // const exportSection = async (element, fileName) => {
  //   const canvas = await html2canvas(element);
  //   const imgData = canvas.toDataURL('image/png');
  //   const ppt = new PptxGenJS();
  //   const slide = ppt.addSlide();
  //   slide.addImage({ data: imgData, x:0, y:0, w:'100%', h:'100%' });
  //   await ppt.writeFile(fileName);
  // };

    // COMMON export logic
    const exportSection = async (element, fileName = 'Full_Dashboard.pptx') => {


      // Instantiate the PPTX generator
    const ppt = new PptxGenJS();
    // Create a new slide
    const slide = ppt.addSlide();
    // Insert our captured image
    slide.addImage({ data: imgData, x: 0, y: 0, w: '100%', h: '100%' });
    // Save to file
    await ppt.writeFile({ fileName });
  };







  return (
    <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }} ref={dashRef}>
      {/* Header */}
      <Box component="header" sx={{
        display: 'flex', alignItems: 'center', justifyContent: 'space-between',
        borderBottom: '3px solid #1976d2', bgcolor: '#e3f2fd', p:2
      }}>
        <Box sx={{ display:'flex', alignItems:'center', gap:1 }}>
          <DashboardIcon fontSize="large"/>
          <Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{ display:'flex', gap:2 }}>
          <Link to="/">➤ Dashboard</Link>
          <Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{ py:4 }}>
        {/* Filters + Inline Export Buttons */}
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          gap: 2,
          mb: 3
        }}>
          <Filters
            filters={filters} setFilters={setFilters}
            regionOptions={regionOptions}
            locationOptions={locationOptions}
            monthOptions={monthOptions}
            priorityOptions={priorityOptions}
          />
          {/* force no wrap so buttons hug the Priority dropdown */}
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexShrink: 0 }}>
            <Button
              variant="contained" size="small"
              onClick={() => exportSection(dashRef.current, 'Full_Dashboard.pptx')}
            >
              Export Dashboard PPT
            </Button>
            <Button
              variant="outlined" size="small"
              onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}
            >
              Export Cards
            </Button>
            <Button
              variant="outlined" size="small"
              onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}
            >
              Export Charts
            </Button>
          </Box>
        </Box>

        {/* Cards (no more export button here) */}
        <Box ref={cardsRef} sx={{ mb: 4 }}>
          <AlarmCard
            summary={filteredSummary}
            rawAlarms={filtered}
            filters={filters}
          />
        </Box>

        {/* Charts (no more export button here) */}
        <Box ref={chartsRef} sx={{ mb: 4 }}>
          <SummaryCards
            summary={filteredSummary}
            filters={filters}
            rawAlarms={filtered}
          />
        </Box>
      </Container>
    </Box>
  );
}



File 2

AlarmCard.js


// src/components/AlarmCard.js
import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary, rawAlarms, filters }) {
  if (!summary) return null;

  // helper: turn "01-Apr-25" → "Apr 25"
  const formatMonthYear = dateStr => {
    const [ , mon, yy ] = dateStr.split('-');
    return `${mon} ${yy}`;
  };

  // 1) apply all filters (region, location, month, priority)
  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                         return false;
    if (filters.location && a.Location !== filters.location)                       return false;
    if (filters.month    && formatMonthYear(a.Date) !== filters.month)             return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)     return false;
    return true;
  });

  const totalAlarms = filtered.length;

  // normalize helper
  const normalize = str => (str || '').toString().trim().toLowerCase();

  // 2) counts per your rules
  const responseSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'response sent'
  ).length;

  const notSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'not sent'
  ).length;

  const reoccurredCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'yes' &&
    normalize(a['Action Taken']) === 'reoccured'
  ).length;

  const responseSentPercentage = totalAlarms
    ? `${((responseSentCount / totalAlarms) * 100).toFixed(2)}%`
    : '0%';

  return (
    <Grid container spacing={1} sx={{ mb: 2 }}>
      {/* Total Alarms */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Total Alarms</Typography>
          <Typography variant="h4">{totalAlarms}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Response Sent */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Response Sent</Typography>
          <Typography variant="h4">{responseSentCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Not Sent */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Not Sent</Typography>
          <Typography variant="h4">{notSentCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Re-occurred */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Re-occurred</Typography>
          <Typography variant="h4">{reoccurredCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Response Sent % */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Response Sent %</Typography>
          <Typography variant="h4">{responseSentPercentage}</Typography>
        </CardContent></Card>
      </Grid>
    </Grid>
  );
}




file 3

Chart.js




// src/components/Chart.js
import React, { useEffect, useRef } from 'react';
import Chart from 'chart.js';
import ChartDataLabels from 'chartjs-plugin-datalabels';
Chart.plugins.register(ChartDataLabels);

export default function MyChart({
  type = 'bar',
  data,
  options = {},
  width = '100%',
  height = '100%'
}) {
  const canvasRef = useRef(null);
  const chartRef  = useRef(null);

  useEffect(() => {
    if (!canvasRef.current) return;
    const ctx = canvasRef.current.getContext('2d');
    chartRef.current?.destroy();

    const isLine = type === 'line';

    const datasets = Array.isArray(data.datasets)
      ? data.datasets.map(ds => {
          // for multi-series you must supply ds.borderColor and ds.backgroundColor arrays
          return {
            ...ds,
            borderWidth: 2,
            // for line: ds.borderColor must be an array of exact colours
            borderColor: isLine
              ? ds.borderColor
              : ds.borderColor || ds.backgroundColor,
            // fill under line is off
            backgroundColor: isLine
              ? 'transparent'
              : ds.backgroundColor,
            // colour each point from the same array
            pointBackgroundColor: isLine
              ? ds.backgroundColor
              : undefined,
            pointBorderColor: isLine
              ? ds.borderColor
              : undefined,
            fill: isLine ? false : ds.fill ?? false,
            ...(isLine && { tension: 0.3, pointRadius: 6 }),
            datalabels: {
              display: true,
              formatter: v => v,
              font: { weight: 'bold' },
              backgroundColor: 'rgba(255,255,255,0.8)',
              borderRadius: 4,
              padding: 4,
              anchor: 'end',
              align: 'top',
              clip: false
            }
          };
        })
      : (() => {
          // single-series fallback: pull your arrays
          const vals = data.values || [];
          const bgArray     = data.bgColors   || [];
          const strokeArray = data.borderColor || bgArray;
          return [{
            label: data.label || '',
            data: vals,
            borderWidth: 2,
            // line segments in your exact strokeArray
            borderColor: isLine
              ? strokeArray
              : strokeArray,
            // no fill under line
            backgroundColor: isLine
              ? 'transparent'
              : bgArray,
            // each dot coloured from bgArray
            pointBackgroundColor: isLine
              ? bgArray
              : undefined,
            pointBorderColor: isLine
              ? strokeArray
              : undefined,
            fill: isLine ? false : true,
            ...(isLine && { tension: 0.3, pointRadius: 6 }),
            datalabels: {
              display: true,
              formatter: v => v,
              font: { weight: 'bold' },
              backgroundColor: 'rgba(255,255,255,0.8)',
              borderRadius: 4,
              padding: 4,
              anchor: 'end',
              align: 'top',
              clip: false
            }
          }];
        })();

    chartRef.current = new Chart(ctx, {
      type,
      data: {
        labels: data.labels,
        datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: { duration: 800 },
        plugins: {
          legend: { labels: { font: { size: 14 } } },
          datalabels: { clip: false }
        },
        scales: {
          x: { beginAtZero: true, ...(options.scales?.x || {}) },
          y: { beginAtZero: true, ...(options.scales?.y || {}) }
        },
        ...options
      }
    });

    return () => chartRef.current?.destroy();
  }, [type, data, options]);

  return (
    <div style={{ width, height, border: '1px solid #ccc', borderRadius: 4, padding: 8 }}>
      <canvas ref={canvasRef} />
    </div>
  );
}




