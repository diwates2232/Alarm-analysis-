
const { loadExcelData } = require('../services/excelService');

const getAlarmSummary = (req, res) => {
    const data = loadExcelData();

    const summary = {
        totalAlarms: 0,
        regionWise: {},
        priorityWise: {},
        rejectionTypeWise: {},
        locationWise: {},
        operatorWise: {},
        responseSentPercentage: 0,
        monthWise: {}
    };

    let responseSentCount = 0;

    data.forEach(row => {
        summary.totalAlarms++;

        // Region wise
        const region = row['Region'] || 'Unknown';
        summary.regionWise[region] = (summary.regionWise[region] || 0) + 1;

        // Priority wise
        const priority = row['CCURE Incident Level'] || 'Unknown';
        summary.priorityWise[priority] = (summary.priorityWise[priority] || 0) + 1;

        // Rejection type wise
        const rejectionType = row['Alarm Rejection Type'] || 'Unknown';
        summary.rejectionTypeWise[rejectionType] = (summary.rejectionTypeWise[rejectionType] || 0) + 1;

        // Location wise
        const location = row['Location'] || 'Unknown';
        summary.locationWise[location] = (summary.locationWise[location] || 0) + 1;

        // Operator wise
        const operator = row['GSOC Operator Attended'] || 'Unknown';
        summary.operatorWise[operator] = (summary.operatorWise[operator] || 0) + 1;

        // Response sent
        const response = (row['If Response Sent (Yes/No)'] || '').toLowerCase();
        if (response === 'yes') responseSentCount++;

        // Month wise
        const dateStr = row['Alarm Date']; // expected format: "DD/MM/YYYY"
        if (typeof dateStr === 'string' && dateStr.includes('/')) {
            const [day, month, year] = dateStr.split('/');
            const monthYear = `${month}-${year}`;
            summary.monthWise[monthYear] = (summary.monthWise[monthYear] || 0) + 1;
        }
    });

    summary.responseSentPercentage = summary.totalAlarms > 0
        ? ((responseSentCount / summary.totalAlarms) * 100).toFixed(2) + '%'
        : '0%';

    // Calculate percentage for other categories
    const addPercentages = obj => {
        const result = {};
        for (const key in obj) {
            const count = obj[key];
            const percentage = ((count / summary.totalAlarms) * 100).toFixed(2) + '%';
            result[key] = { count, percentage };
        }
        return result;
    };

    summary.regionWise = addPercentages(summary.regionWise);
    summary.priorityWise = addPercentages(summary.priorityWise);
    summary.rejectionTypeWise = addPercentages(summary.rejectionTypeWise);
    summary.locationWise = addPercentages(summary.locationWise);
    summary.operatorWise = addPercentages(summary.operatorWise);
    summary.monthWise = addPercentages(summary.monthWise);

    res.json(summary);
};

const getRawAlarms = (req, res) => {
    const data = loadExcelData();
    res.json(data);
};

module.exports = {
    getAlarmSummary,
    getRawAlarms
};















const { loadExcelData } = require('../services/excelService');

const getAlarmSummary = (req, res) => {
    const data = loadExcelData();

    const summary = {
        totalAlarms: data.length,
        alarmsByRegion: {},
        regionPercentages: {},
        alarmsByRejectionType: {},
        rejectionTypePercentages: {},
        alarmsByPriority: {},
        priorityPercentages: {},
        alarmsByLocation: {},
        locationPercentages: {},
        alarmsByGSOCOperator: {},
        gsocOperatorPercentages: {},
        responseSentCount: 0,
        responseSentPercentage: 0,
        monthWiseCount: {},
        monthWisePercentage: {},
    };

    const total = data.length;

    data.forEach(row => {
        const region = row['Region'] || 'Unknown';
        const priority = row['CCURE Incident Priority'] || 'Unknown';
        const rejection = row['Rejection'] || 'Unknown';
        const location = row['Location'] || 'Unknown';
        const operator = row['Name of Person Attending Alarms (First, Last Name)'] || 'Unknown';
        const actionTaken = row['Action Taken'] || '';
        const reoccurred = row['If Reoccurred Yes/No'] || '';

        // Count by region
        summary.alarmsByRegion[region] = (summary.alarmsByRegion[region] || 0) + 1;

        // Count by rejection
        summary.alarmsByRejectionType[rejection] = (summary.alarmsByRejectionType[rejection] || 0) + 1;

        // Count by priority
        summary.alarmsByPriority[priority] = (summary.alarmsByPriority[priority] || 0) + 1;

        // Count by location
        summary.alarmsByLocation[location] = (summary.alarmsByLocation[location] || 0) + 1;

        // Count by GSOC operator
        summary.alarmsByGSOCOperator[operator] = (summary.alarmsByGSOCOperator[operator] || 0) + 1;

        // Check if response sent
        if (reoccurred.toLowerCase() === 'no' && actionTaken.toLowerCase() !== 'not sent') {
            summary.responseSentCount++;
        }

        // Month-wise summary
        const dateStr = row['Date']; // Format: DD-MMM-YY or DD-MMM-YYYY
        if (dateStr) {
            const [day, mon, year] = dateStr.split('-');
            const monthKey = mon + '-' + (year.length === 2 ? '20' + year : year); // Apr-25

            summary.monthWiseCount[monthKey] = (summary.monthWiseCount[monthKey] || 0) + 1;
        }
    });

    // Calculate Percentages
    for (const [key, value] of Object.entries(summary.alarmsByRegion)) {
        summary.regionPercentages[key] = ((value / total) * 100).toFixed(2) + '%';
    }

    for (const [key, value] of Object.entries(summary.alarmsByRejectionType)) {
        summary.rejectionTypePercentages[key] = ((value / total) * 100).toFixed(2) + '%';
    }

    for (const [key, value] of Object.entries(summary.alarmsByPriority)) {
        summary.priorityPercentages[key] = ((value / total) * 100).toFixed(2) + '%';
    }

    for (const [key, value] of Object.entries(summary.alarmsByLocation)) {
        summary.locationPercentages[key] = ((value / total) * 100).toFixed(2) + '%';
    }

    for (const [key, value] of Object.entries(summary.alarmsByGSOCOperator)) {
        summary.gsocOperatorPercentages[key] = ((value / total) * 100).toFixed(2) + '%';
    }

    for (const [key, value] of Object.entries(summary.monthWiseCount)) {
        summary.monthWisePercentage[key] = ((value / total) * 100).toFixed(2) + '%';
    }

    summary.responseSentPercentage = ((summary.responseSentCount / total) * 100).toFixed(2) + '%';

    res.json(summary);
};

const getRawAlarms = (req, res) => {
    const data = loadExcelData();
    res.json(data);
};

module.exports = {
    getAlarmSummary,
    getRawAlarms
};








Now i want to make Summary section like this.

Global - (APAC + EMEA + LACA + NAMER)  Total Number of Alarm Occured.
then Countand percentage of alarm ffor  specific Region wise - APAC, EMAEA, LACA, NAMEER
ALARM by rejection type - Count and percentage 
Alarm Prority - Count and Percentage of Alarm for High , Medium , Low
Then same for Specific Location.

Also make a summary for GSOC Operator Who Attend alarm count and Percentage for GSOC Operator Who attend alarm .
also percentage of Responce sent .When Alarm occured.
also make a make summary for Month wise count and percentage 


Read below my backend details and update files as per my request .First Update for only summary
then we will discuss about improvment for raw data



alarmController.js

const { loadExcelData } = require('../services/excelService');

const getAlarmSummary = (req, res) => {
    const data = loadExcelData();

    const summary = {
        totalAlarms: data.length,
        alarmsByRegion: {},
        alarmsBySeverity: {},
        reoccurredCount: 0
    };

    data.forEach(row => {
        const region = row['Region'] || 'Unknown';
        const severity = row['CCURE Incident Level'] || 'Unknown';
        const reoccurred = row['If Reoccurred (Yes/No)'] === 'Yes';

        summary.alarmsByRegion[region] = (summary.alarmsByRegion[region] || 0) + 1;
        summary.alarmsBySeverity[severity] = (summary.alarmsBySeverity[severity] || 0) + 1;

        if (reoccurred) summary.reoccurredCount++;
    });

    res.json(summary);
};

const getRawAlarms = (req, res) => {
    const data = loadExcelData();
    res.json(data);
};

module.exports = {
    getAlarmSummary,
    getRawAlarms
};






alarmRoutes.js


const { loadExcelData } = require('../services/excelService');

const getAlarmSummary = (req, res) => {
    const data = loadExcelData();

    const summary = {
        totalAlarms: data.length,
        alarmsByRegion: {},
        alarmsBySeverity: {},
        reoccurredCount: 0
    };

    data.forEach(row => {
        const region = row['Region'] || 'Unknown';
        const severity = row['CCURE Incident Level'] || 'Unknown';
        const reoccurred = row['If Reoccurred (Yes/No)'] === 'Yes';

        summary.alarmsByRegion[region] = (summary.alarmsByRegion[region] || 0) + 1;
        summary.alarmsBySeverity[severity] = (summary.alarmsBySeverity[severity] || 0) + 1;

        if (reoccurred) summary.reoccurredCount++;
    });

    res.json(summary);
};

const getRawAlarms = (req, res) => {
    const data = loadExcelData();
    res.json(data);
};

module.exports = {
    getAlarmSummary,
    getRawAlarms
};




excelService.js

const xlsx = require('xlsx');
const path = require('path');

function loadExcelData() {
    const filePath = path.join(__dirname, '../data/Alarms.xlsx');
    const workbook = xlsx.readFile('./data/Alarms.xlsx');
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    return xlsx.utils.sheet_to_json(sheet);
}

module.exports = {
    loadExcelData
};





Server.js

const express = require('express');
const cors = require('cors');
const alarmRoutes = require('./routes/alarmRoutes');

const app = express();
const PORT = 3000;

app.use(cors());
app.use('/api/alarms', alarmRoutes);

app.listen(PORT, () => {
    console.log(`Server is running at http://localhost:${PORT}`);
});
