as per your Given files i have update this files.
when i update this file Operator Wise Charts display Unknown result & 
Month dropdown is not display any option .
Lets compare both file and check Where is issue is.
and Solve this issue.

for more information see Console Error message.


[ContentService.SetContentInitData] target: { TabId: 1454078415, FrameId: 0}
react refresh:37 Download the React DevTools for a better development experience: https://reactjs.org/link/react-devtools
Filters.js:261 Warning: Each child in a list should have a unique "key" prop.

Check the render method of `Filters`. See https://reactjs.org/link/warning-keys for more information.
    at MenuItem (http://localhost:3001/static/js/bundle.js:16571:97)
    at Filters (http://localhost:3001/static/js/bundle.js:175229:3)
    at div
    at http://localhost:3001/static/js/bundle.js:985:66
    at Container (http://localhost:3001/static/js/bundle.js:30922:19)
    at div
    at http://localhost:3001/static/js/bundle.js:985:66
    at Box (http://localhost:3001/static/js/bundle.js:32404:81)
    at Dashboard (http://localhost:3001/static/js/bundle.js:177061:80)
    at RenderedRoute (http://localhost:3001/static/js/bundle.js:124287:3)
    at Routes (http://localhost:3001/static/js/bundle.js:124943:3)
    at Router (http://localhost:3001/static/js/bundle.js:124890:13)
    at BrowserRouter (http://localhost:3001/static/js/bundle.js:127199:3)
    at App
printWarning @ react-jsx-dev-runtime.development.js:87
error @ react-jsx-dev-runtime.development.js:61
validateExplicitKey @ react-jsx-dev-runtime.development.js:1078
validateChildKeys @ react-jsx-dev-runtime.development.js:1105
jsxWithValidation @ react-jsx-dev-runtime.development.js:1267
Filters @ Filters.js:261
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performConcurrentWorkOnRoot @ react-dom.development.js:25777
workLoop @ scheduler.development.js:266
flushWork @ scheduler.development.js:239
performWorkUntilDeadline @ scheduler.development.js:533Understand this error



File 1
dashboard.js


// src/pages/Dashboard.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters      from '../components/Filters';
import SummaryCards from '../components/SummaryCards';
import AlarmCard    from '../components/AlarmCard';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region:'', location:'', month:'', priority:''
  });

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([s, r]) => {
        setSummary(s.data);
        setRawAlarms(r.data);
      })
      .catch(console.error);
  }, []);

  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [], [summary]
  );

  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms
            .filter(a => a.Region === filters.region)
            .map(a => a.Location)
        ))
      : [], [rawAlarms, filters.region]
  );

  const monthOptions = useMemo(() => {
    const base = rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)   return false;
      if (filters.location && a.Location !== filters.location) return false;
      return true;
    });
    return Array.from(new Set(base.map(a => a.Month))).sort();
  }, [rawAlarms, filters.region, filters.location]);

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // compute totals
  const { totalAlarms, responseSentPercentage } = useMemo(() => {
    const base = rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)   return false;
      if (filters.location && a.Location !== filters.location) return false;
      if (filters.month    && a.Month    !== filters.month)    return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    });
    const tot = base.length;
    const sent = base.filter(a =>
      a['Action Taken'] && a['Action Taken']!=='Not Sent'
    ).length;
    return {
      totalAlarms: tot,
      responseSentPercentage: tot
        ? `${((sent/tot)*100).toFixed(2)}%`
        : '0%'
    };
  }, [rawAlarms, filters]);

  // rotate
  const slidesRef = useRef([]); const slideIdx = useRef(0);
  useEffect(() => {
    if (!summary) return;
    const slides = [{region:'',location:'',month:'',priority:''}];
    regionOptions.forEach(r => slides.push({region:r,location:'',month:'',priority:''}));
    slidesRef.current = slides;
    slideIdx.current = 0;
    setFilters(slides[0]);
    const id = setInterval(() => {
      slideIdx.current = (slideIdx.current+1) % slidesRef.current.length;
      setFilters(slidesRef.current[slideIdx.current]);
    }, 30000);
    return () => clearInterval(id);
  }, [summary, regionOptions]);

  // filtered summary rebuilds operatorWise too
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = {...summary};

    // region & location
    if (filters.region) {
      fs.regionWise = {[filters.region]: summary.regionWise[filters.region]};
      fs.locationWise = {};
      locationOptions
        .filter(loc => !filters.location || loc === filters.location)
        .forEach(loc => {
          fs.locationWise[loc] = summary.locationWise[loc];
        });
    }

    // month
    if (filters.month) {
      fs.monthWise = {[filters.month]: summary.monthWise[filters.month]};
    }

    // recalc operatorWise from rawAlarms slice
    const opCounts = rawAlarms
      .filter(a => {
        if (filters.region   && a.Region   !== filters.region)   return false;
        if (filters.location && a.Location !== filters.location) return false;
        if (filters.month    && a.Month    !== filters.month)    return false;
        if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
        return true;
      })
      .reduce((acc, a) => {
        const op = a.Operator || 'Unknown';
        acc[op] = (acc[op] || 0) + 1;
        return acc;
      }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k,v])=>[k,{count:v}])
    );

    return fs;
  }, [summary, rawAlarms, filters, locationOptions]);

  if (!summary) {
    return <Typography>Loading…</Typography>;
  }

  return (
    <Box sx={{width:'100vw',minHeight:'100vh',overflowX:'hidden'}}>
      {/* header */}
      <Box component="header" sx={{
        display:'flex',alignItems:'center',justifyContent:'space-between',
        borderBottom:'3px solid #1976d2', bgcolor:'#e3f2fd', p:2
      }}>
        <Box sx={{display:'flex',alignItems:'center',gap:1}}>
          <DashboardIcon fontSize="large"/>
          <Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{display:'flex',gap:2}}>
          <Link to="/">➤ Dashboard</Link>
          <Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{py:4}}>
        <Filters
          filters={filters}
          setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          monthOptions={monthOptions}
          priorityOptions={priorityOptions}
        />

        <AlarmCard
          summary={filteredSummary}
          rawAlarms={rawAlarms}
          filters={filters}
        />

        <SummaryCards
          summary={filteredSummary}
          filters={filters}
          rawAlarms={rawAlarms}
        />
      </Container>
    </Box>
  );
}




FIle 2 Filters.js


// src/components/Filters.js
import React from 'react';
import {
  TextField,
  MenuItem,
  Grid,
  InputAdornment
} from '@mui/material';
import PublicIcon from '@mui/icons-material/Public';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import SearchIcon from '@mui/icons-material/Search';
import PriorityHighIcon from '@mui/icons-material/PriorityHigh';

export default function Filters({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = [],
  monthOptions,
  employeeOptions,
  doorOptions,
  priorityOptions,
  rejectionOptions
}) {
  const handleChange = field => e => {
    const value = e.target.value;
    setFilters(prev => {
      // always start from previous, then override this field
      const next = { ...prev, [field]: value };

      // cascade resets:
      if (field === 'region') {
        // new region: clear location + everything downstream
        next.location   = '';
        next.month      = '';
        next.priority   = '';
        next.rejection  = '';
        next.employee   = '';
        next.door       = '';
      }
      if (field === 'location') {
        // new location: clear month + downstream
        next.month      = '';
        next.priority   = '';
        next.rejection  = '';
        next.employee   = '';
        next.door       = '';
      }
      if (field === 'month') {
        // new month: clear priority + rejection
        next.priority   = '';
        next.rejection  = '';
      }
      if (field === 'priority') {
        // new priority: clear rejection
        next.rejection  = '';
      }
      if (field === 'employee') {
        // selecting employee shouldn't clear other filters
      }
      if (field === 'door') {
        // new door: clear rejection
        next.rejection  = '';
      }
      return next;
    });
  };

  return (
    <Grid container spacing={2} alignItems="center" sx={{ mb: 3 }}>
      {/* Region */}
      <Grid item>
        <TextField
          select label="Region" fullWidth
          value={filters.region}
          onChange={handleChange('region')}
          InputProps={{
            startAdornment: <InputAdornment position="start"><PublicIcon/></InputAdornment>
          }}
        >
          <MenuItem value="">All Regions</MenuItem>
          {regionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Location */}
      <Grid item>
        <TextField
          select label="Location" fullWidth
          value={filters.location}
          onChange={handleChange('location')}
          disabled={!filters.region}
          InputProps={{
            startAdornment: <InputAdornment position="start"><LocationOnIcon/></InputAdornment>
          }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(l => <MenuItem key={l} value={l}>{l}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Month (Dashboard) */}
      {monthOptions && (
        <Grid item>
          <TextField
            select label="Month" fullWidth
            value={filters.month}
            onChange={handleChange('month')}
            InputProps={{
              startAdornment: <InputAdornment position="start"><CalendarMonthIcon/></InputAdornment>
            }}
          >
            <MenuItem value="">All Months</MenuItem>
            {monthOptions.map(m => <MenuItem key={m} value={m}>{m}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Employee (RawAlarms) */}
      {employeeOptions && (
        <Grid item>
          <TextField
            select label="Employee" fullWidth
            value={filters.employee}
            onChange={handleChange('employee')}
            InputProps={{
              startAdornment: <InputAdornment position="start"><SearchIcon/></InputAdornment>
            }}
          >
            <MenuItem value="">All Employees</MenuItem>
            {employeeOptions.map(e => <MenuItem key={e} value={e}>{e}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Door */}
      {doorOptions && (
        <Grid item>
          <TextField
            select label="Door" fullWidth
            value={filters.door}
            onChange={handleChange('door')}
          >
            <MenuItem value="">All Doors</MenuItem>
            {doorOptions.map(d => <MenuItem key={d} value={d}>{d}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Priority */}
      {priorityOptions && (
        <Grid item>
          <TextField
            select label="Priority" fullWidth
            value={filters.priority}
            onChange={handleChange('priority')}
            InputProps={{
              startAdornment: <InputAdornment position="start"><PriorityHighIcon/></InputAdornment>
            }}
          >
            <MenuItem value="">All Priorities</MenuItem>
            {priorityOptions.map(p => <MenuItem key={p} value={p}>{p}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Rejection */}
      {rejectionOptions && (
        <Grid item>
          <TextField
            select label="Rejection" fullWidth
            value={filters.rejection}
            onChange={handleChange('rejection')}
          >
            <MenuItem value="">All Rejections</MenuItem>
            {rejectionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Date */}
      {filters.hasOwnProperty('date') && (
        <Grid item>
          <TextField
            label="Date"
            type="date"
            fullWidth
            value={filters.date}
            onChange={handleChange('date')}
            InputLabelProps={{ shrink: true }}
          />
        </Grid>
      )}
    </Grid>
  );
}



