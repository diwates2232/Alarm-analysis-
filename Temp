// src/pages/RawAlarms.js
import React, { useEffect, useState, useMemo } from 'react';
import { Typography, Container, Grid, TextField, MenuItem, Box, Button, Link } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import TableChartIcon from '@mui/icons-material/TableChart';
import ListAltIcon from '@mui/icons-material/ListAlt';
import Filters from '../components/Filters';
import AlarmsTable from '../components/AlarmsTable';
import { getRawAlarms } from '../services/api';

export default function RawAlarms() {
  const [alarms, setAlarms]       = useState([]);
  const [loading, setLoading]     = useState(true);
  const [filters, setFilters]     = useState({
    region: '', location: '', door: '', employee: '',
    priority: '', rejection: '', date: ''
  });
  const [view, setView] = useState('employee');

  useEffect(() => {
    getRawAlarms()
      .then(res => setAlarms(res.data || []))
      .catch(() => setAlarms([]))
      .finally(() => setLoading(false));
  }, []);

  // derive filter options
  const regionOptions = useMemo(
    () => Array.from(new Set(alarms.map(a => a.Region))).sort(),
    [alarms]
  );

  const locationOptions = useMemo(
    () => Array.from(new Set(
      alarms
        .filter(a => !filters.region || a.Region === filters.region)
        .map(a => a.Location)
    )).sort(),
    [alarms, filters.region]
  );

  const doorOptions = useMemo(
    () => Array.from(new Set(
      alarms
        .filter(a =>
          (!filters.region   || a.Region   === filters.region) &&
          (!filters.location || a.Location === filters.location)
        )
        .map(a => a.Door)
    )).sort(),
    [alarms, filters.region, filters.location]
  );

  // employeeOptions now built from same region+location slice:
  const employeeOptions = useMemo(
    () => Array.from(new Set(
      alarms
        .filter(a =>
          (!filters.region   || a.Region   === filters.region) &&
          (!filters.location || a.Location === filters.location)
        )
        .map(a => a['Employee Name'])
    )).sort(),
    [alarms, filters.region, filters.location]
  );

  const priorityOptions = useMemo(
    () => Array.from(new Set(alarms.map(a => a['CCURE Incident Priority']))).sort(),
    [alarms]
  );

  const rejectionOptions = useMemo(
    () => Array.from(new Set(alarms.map(a => a.Rejection))).sort(),
    [alarms]
  );

  const filtered = useMemo(() => {
    return alarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)                return false;
      if (filters.location && a.Location !== filters.location)              return false;
      if (filters.door     && a.Door     !== filters.door)                  return false;
      if (filters.employee && a['Employee Name'] !== filters.employee)      return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      if (filters.rejection && a.Rejection !== filters.rejection)           return false;
      if (filters.date     && a.Date     !== filters.date)                  return false;
      return true;
    });
  }, [alarms, filters]);

  if (loading) return (
    <Container maxWidth={false} sx={{ pt: 4 }}>
      <Typography variant="h4">Raw Alarms</Typography>
      <Typography>Loading…</Typography>
    </Container>
  );

  return (
    <Container maxWidth={false} sx={{ p: 0, height: '100vh', overflow: 'auto' }}>
      {/* Header */}
      <Box sx={{
        display: 'flex', alignItems: 'center', justifyContent: 'space-between',
        bgcolor: 'background.paper', p: 2, borderBottom: 1, borderColor: 'divider'
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <TableChartIcon fontSize="large" />
          <Typography variant="h4">Raw Alarms Analysis</Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Link href="/"><DashboardIcon /> Dashboard</Link>
          <Link href="/alarms"><TableChartIcon /> Raw Alarms</Link>
        </Box>
      </Box>

      {/* Filters */}
      <Box sx={{ p: 2 }}>
        <Filters
          filters={filters}
          setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          doorOptions={doorOptions}
          employeeOptions={employeeOptions}
          priorityOptions={priorityOptions}
          rejectionOptions={rejectionOptions}
        />
      </Box>

      {/* View toggle */}
      <Box sx={{ p: 2, display: 'flex', gap: 2 }}>
        <Button
          variant={view==='employee'?'contained':'outlined'}
          onClick={() => setView('employee')}
        >Employee Analysis</Button>
        <Button
          variant={view==='door'?'contained':'outlined'}
          onClick={() => setView('door')}
        >Door Analysis</Button>
        <Button
          variant={view==='detailed'?'contained':'outlined'}
          onClick={() => setView('detailed')}
        >Detailed Records</Button>
      </Box>

      {/* Table */}
      <Box sx={{ p: 2 }}>
        <AlarmsTable alarms={filtered} maxRows={100} tableType={view} />
      </Box>
    </Container>
  );
}






// src/pages/Dashboard.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters      from '../components/Filters';
import SummaryCards from '../components/SummaryCards';
import AlarmCard    from '../components/AlarmCard';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region:'', location:'', month:'', priority:''
  });

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([s, r]) => {
        setSummary(s.data);
        setRawAlarms(r.data);
      })
      .catch(console.error);
  }, []);

  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [], [summary]
  );

  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms
            .filter(a => a.Region === filters.region)
            .map(a => a.Location)
        ))
      : [], [rawAlarms, filters.region]
  );

  const monthOptions = useMemo(() => {
    const base = rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)   return false;
      if (filters.location && a.Location !== filters.location) return false;
      return true;
    });
    return Array.from(new Set(base.map(a => a.Month))).sort();
  }, [rawAlarms, filters.region, filters.location]);

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // compute totals
  const { totalAlarms, responseSentPercentage } = useMemo(() => {
    const base = rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)   return false;
      if (filters.location && a.Location !== filters.location) return false;
      if (filters.month    && a.Month    !== filters.month)    return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    });
    const tot = base.length;
    const sent = base.filter(a =>
      a['Action Taken'] && a['Action Taken']!=='Not Sent'
    ).length;
    return {
      totalAlarms: tot,
      responseSentPercentage: tot
        ? `${((sent/tot)*100).toFixed(2)}%`
        : '0%'
    };
  }, [rawAlarms, filters]);

  // rotate
  const slidesRef = useRef([]); const slideIdx = useRef(0);
  useEffect(() => {
    if (!summary) return;
    const slides = [{region:'',location:'',month:'',priority:''}];
    regionOptions.forEach(r => slides.push({region:r,location:'',month:'',priority:''}));
    slidesRef.current = slides;
    slideIdx.current = 0;
    setFilters(slides[0]);
    const id = setInterval(() => {
      slideIdx.current = (slideIdx.current+1) % slidesRef.current.length;
      setFilters(slidesRef.current[slideIdx.current]);
    }, 30000);
    return () => clearInterval(id);
  }, [summary, regionOptions]);

  // filtered summary rebuilds operatorWise too
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = {...summary};

    // region & location
    if (filters.region) {
      fs.regionWise = {[filters.region]: summary.regionWise[filters.region]};
      fs.locationWise = {};
      locationOptions
        .filter(loc => !filters.location || loc === filters.location)
        .forEach(loc => {
          fs.locationWise[loc] = summary.locationWise[loc];
        });
    }

    // month
    if (filters.month) {
      fs.monthWise = {[filters.month]: summary.monthWise[filters.month]};
    }

    // recalc operatorWise from rawAlarms slice
    const opCounts = rawAlarms
      .filter(a => {
        if (filters.region   && a.Region   !== filters.region)   return false;
        if (filters.location && a.Location !== filters.location) return false;
        if (filters.month    && a.Month    !== filters.month)    return false;
        if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
        return true;
      })
      .reduce((acc, a) => {
        const op = a.Operator || 'Unknown';
        acc[op] = (acc[op] || 0) + 1;
        return acc;
      }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k,v])=>[k,{count:v}])
    );

    return fs;
  }, [summary, rawAlarms, filters, locationOptions]);

  if (!summary) {
    return <Typography>Loading…</Typography>;
  }

  return (
    <Box sx={{width:'100vw',minHeight:'100vh',overflowX:'hidden'}}>
      {/* header */}
      <Box component="header" sx={{
        display:'flex',alignItems:'center',justifyContent:'space-between',
        borderBottom:'3px solid #1976d2', bgcolor:'#e3f2fd', p:2
      }}>
        <Box sx={{display:'flex',alignItems:'center',gap:1}}>
          <DashboardIcon fontSize="large"/>
          <Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{display:'flex',gap:2}}>
          <Link to="/">➤ Dashboard</Link>
          <Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{py:4}}>
        <Filters
          filters={filters}
          setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          monthOptions={monthOptions}
          priorityOptions={priorityOptions}
        />

        <AlarmCard
          summary={filteredSummary}
          rawAlarms={rawAlarms}
          filters={filters}
        />

        <SummaryCards
          summary={filteredSummary}
          filters={filters}
          rawAlarms={rawAlarms}
        />
      </Container>
    </Box>
  );
}





check below files and solve this errors. dont make another changes on foles.


File 1

dashboard.js



// src/pages/Dashboard.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters      from '../components/Filters';
import SummaryCards from '../components/SummaryCards';
import AlarmCard    from '../components/AlarmCard';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '', location: '', month: '', priority: ''
  });

  // Fetch summary & raw
  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);

  // Options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [], [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms
            .filter(a => a.Region === filters.region)
            .map(a => a.Location)
        ))
      : [], [rawAlarms, filters.region]
  );


  // const monthOptions = useMemo(
  //   () => summary ? Object.keys(summary.monthWise) : [], [summary]
  // );

  // new: monthOptions from rawAlarms filtered by region+location
const monthOptions = useMemo(() => {
  // start with rawAlarms, apply region+location filters
  const base = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)   return false;
    if (filters.location && a.Location !== filters.location) return false;
    return true;
  });
  // unique months
  return Array.from(new Set(base.map(a => a.Month))).sort();
}, [rawAlarms, filters.region, filters.location]);





  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // total & response percentage
  const { totalAlarms, responseSentPercentage } = useMemo(() => {
    const base = rawAlarms.filter(a => {
      if (filters.region   && a.Region !== filters.region)                               return false;
      if (filters.location && a.Location !== filters.location)                           return false;
      if (filters.month    && a.Month !== filters.month)                                 return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)         return false;
      return true;
    });
    const total = base.length;
    const sent  = base.filter(a =>
      a['Action Taken'] && a['Action Taken'] !== 'Not Sent'
    ).length;
    return {
      totalAlarms: total,
      responseSentPercentage: total
        ? `${((sent / total) * 100).toFixed(2)}%`
        : '0%'
    };
  }, [rawAlarms, filters]);

  // Auto‐rotate
  const slidesRef = useRef([]);
  const slideIdx  = useRef(0);
  useEffect(() => {
    if (!summary) return;
    const slides = [{ region:'', location:'', month:'', priority:'' }];
    regionOptions.forEach(r => slides.push({ region:r, location:'', month:'', priority:'' }));
    slidesRef.current = slides;
    slideIdx.current   = 0;
    setFilters(slides[0]);
    const id = setInterval(() => {
      slideIdx.current = (slideIdx.current + 1) % slidesRef.current.length;
      setFilters(slidesRef.current[slideIdx.current]);
    }, 30000);
    return () => clearInterval(id);
  }, [summary, regionOptions]);

  // filteredSummary for charts
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };
    // region & location
    if (filters.region) {
      fs.regionWise   = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(loc => !filters.location || loc === filters.location)
        .forEach(loc => {
          fs.locationWise[loc] = summary.locationWise[loc];
        });
    }
    // month
    if (filters.month) {
      fs.monthWise = { [filters.month]: summary.monthWise[filters.month] };
    }
    return fs;
  }, [summary, filters, locationOptions]);

  if (!summary) {
    return <Typography>Loading dashboard…</Typography>;
  }

  return (
    <Box sx={{ width:'100vw', minHeight:'100vh', overflowX:'hidden' }}>
      {/* Header */}
      <Box component="header" sx={{
        display:'flex', alignItems:'center', justifyContent:'space-between',
        borderBottom:'3px solid #1976d2', bgcolor:'#e3f2fd', p:2
      }}>
        <Box sx={{ display:'flex', alignItems:'center', gap:1 }}>
          <DashboardIcon fontSize="large" />
          <Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{ display:'flex', gap:2 }}>
          <Link to="/">➤ Dashboard</Link>
          <Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{ py:4 }}>
        {/* Filters: all your props */}
        <Filters
          filters={filters}
          setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          monthOptions={monthOptions}
          priorityOptions={priorityOptions}
        />

        {/* Cards */}
        <AlarmCard
          summary={filteredSummary}
          rawAlarms={rawAlarms}
          filters={filters}
        />

        {/* Charts */}
        <SummaryCards
          summary={filteredSummary}
          filters={filters}
          rawAlarms={rawAlarms}
        />
      </Container>
    </Box>
  );
}




File 2

rawAlarms.js



// src/pages/RawAlarms.js
import React, { useEffect, useState, useMemo } from 'react';
import { Typography, Container, Grid, TextField, MenuItem, Box, Button, Link } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import TableChartIcon from '@mui/icons-material/TableChart';
import ListAltIcon from '@mui/icons-material/ListAlt';
import Filters from '../components/Filters';
import AlarmsTable from '../components/AlarmsTable';
import { getRawAlarms } from '../services/api';

export default function RawAlarms() {
  const [alarms, setAlarms]       = useState([]);
  const [loading, setLoading]     = useState(true);
  const [filters, setFilters]     = useState({
    region: '', location: '', door: '', employee: '',
    priority: '', rejection: '', date: ''
  });

  const [view, setView] = useState('employee'); // 'employee' | 'door' | 'detailed'

  useEffect(() => {
    getRawAlarms()
      .then(res => setAlarms(res.data || []))
      .catch(() => setAlarms([]))
      .finally(() => setLoading(false));
  }, []);

  // derive filter options...
  const regionOptions   = useMemo(() => [...new Set(alarms.map(a => a.Region))], [alarms]);
  const locationOptions = useMemo(() => [...new Set(alarms
    .filter(a => !filters.region || a.Region === filters.region)
    .map(a => a.Location))], [alarms, filters.region]);
  const doorOptions     = useMemo(() => [...new Set(alarms
    .filter(a => (!filters.region || a.Region === filters.region) && (!filters.location || a.Location === filters.location))
    .map(a => a.Door))], [alarms, filters.region, filters.location]);



  // const employeeOptions = useMemo(() => [...new Set(alarms.map(a => a['Employee Name']))], [alarms]);

  // new: employeeOptions from the currently region+location filtered set
const employeeOptions = useMemo(() => {
  return Array.from(new Set(
    filteredAlarms.map(a => a['Employee Name'])
  )).sort();
}, [filteredAlarms]);






  const priorityOptions = useMemo(() => [...new Set(alarms.map(a => a['CCURE Incident Priority']))], [alarms]);
  const rejectionOptions= useMemo(() => [...new Set(alarms.map(a => a.Rejection))], [alarms]);

  // filtered alarms by all fields
  const filtered = useMemo(() => {
    return alarms.filter(a => {
      if (filters.region     && a.Region !== filters.region)                 return false;
      if (filters.location   && a.Location !== filters.location)             return false;
      if (filters.door       && a.Door !== filters.door)                     return false;
      if (filters.employee   && a['Employee Name'] !== filters.employee)     return false;
      if (filters.priority   && a['CCURE Incident Priority'] !== filters.priority) return false;
      if (filters.rejection  && a.Rejection !== filters.rejection)           return false;
      if (filters.date       && a.Date !== filters.date)                     return false;
      return true;
    });
  }, [alarms, filters]);

  if (loading) return (
    <Container maxWidth={false} sx={{ pt: 4 }}>
      <Typography variant="h4">Raw Alarms</Typography>
      <Typography>Loading…</Typography>
    </Container>
  );

  return (
    <Container maxWidth={false} sx={{ p: 0, height: '100vh', overflow: 'auto' }}>
      {/* Header */}
      <Box
        sx={{
          display: 'flex', alignItems: 'center', justifyContent: 'space-between',
          bgcolor: 'background.paper', p: 2, borderBottom: 1, borderColor: 'divider'
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <TableChartIcon fontSize="large" />
          <Typography variant="h4">Raw Alarms Analysis</Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Link href="/"><DashboardIcon /> Dashboard</Link>
          <Link href="/alarms"><TableChartIcon /> Raw Alarms</Link>
        </Box>
      </Box>

      {/* Filters */}
      <Box sx={{ p: 2 }}>
        <Filters
          filters={filters}
          setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          doorOptions={doorOptions}
          employeeOptions={employeeOptions}
          priorityOptions={priorityOptions}
          rejectionOptions={rejectionOptions}
        />
      </Box>

      {/* View buttons */}
      <Box sx={{ p: 2, display: 'flex', gap: 2 }}>
        <Button
          variant={view === 'employee' ? 'contained' : 'outlined'}
          onClick={() => setView('employee')}
        >
          Employee Analysis
        </Button>
        <Button
          variant={view === 'door' ? 'contained' : 'outlined'}
          onClick={() => setView('door')}
        >
          Door Analysis
        </Button>
        <Button
          variant={view === 'detailed' ? 'contained' : 'outlined'}
          onClick={() => setView('detailed')}
        >
          Detailed Records
        </Button>
      </Box>

      {/* Table */}
      <Box sx={{ p: 2 }}>
        {view === 'employee' && (
          <AlarmsTable
            alarms={filtered}
            maxRows={100}
            tableType="employee"
          />
        )}
        {view === 'door' && (
          <AlarmsTable
            alarms={filtered}
            maxRows={100}
            tableType="door"
          />
        )}
        {view === 'detailed' && (
          <AlarmsTable
            alarms={filtered}
            maxRows={100}
            tableType="detailed"
          />
        )}
      </Box>
    </Container>
  );
}



   
