Read Below recat.js File carefully and make changes as per requirnment.
I have shared you images referred image and make dashboard like this .
Dont use at only pie chart use diffrent diffrent tools to make attractive dashboards.
kindly check images and make changes on file and give me updated files carefully.



File 1 

Alarmcard.js

import React from 'react';

const AlarmCard = () => {
  // You can replace this with dynamic alarm data later
  return (
    <div style={{ border: '1px solid #ccc', padding: '20px', marginTop: '20px' }}>
      <h2>Alarm Summary</h2>
      <p>Critical Alarms: 5</p>
      <p>Major Alarms: 12</p>
      <p>Minor Alarms: 8</p>
    </div>
  );
};

export default AlarmCard;



File -2 

chart.js

import React, { useEffect, useRef } from 'react';
import {
  Chart as ChartJS,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend
);

const MyChart = ({ data }) => {
  const chartRef = useRef(null);
  const chartInstance = useRef(null);

  useEffect(() => {
    const ctx = chartRef.current.getContext('2d');

    // Destroy existing chart instance if it exists
    if (chartInstance.current) {
      chartInstance.current.destroy();
    }

    // Define chart configuration
    const config = {
      type: 'bar', // Change to 'doughnut', 'line', etc. as needed
      data: {
        labels: data.labels,
        datasets: [{
          label: 'My Dataset',
          data: data.values,
          backgroundColor: [
            '#8884d8',
            '#82ca9d',
            '#ffc658',
            '#ff7f50',
            '#a29bfe',
          ],
          borderWidth: 1,
        }],
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            enabled: true,
          },
        },
        scales: {
          x: {
            beginAtZero: true,
          },
          y: {
            beginAtZero: true,
          },
        },
      },
    };

    // Create new chart instance
    chartInstance.current = new Chart(ctx, config);
  }, [data]);

  return (
    <div style={{ width: '100%', height: '400px' }}>
      <canvas ref={chartRef}></canvas>
    </div>
  );
};

export default MyChart;


file 3 

Filters.js



import React from 'react';
import { TextField, MenuItem } from '@mui/material';

const Filters = ({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = []
}) => {
  const handleChange = (field) => (e) =>
    setFilters(prev => ({ ...prev, [field]: e.target.value, ...(field === 'region' && { location: '' }) }));

  return (
    <div style={{ display: 'flex', gap: '1rem', marginBottom: 16 }}>
      {/* Region dropdown */}
      <TextField
        select
        label="Region"
        value={filters.region}
        onChange={handleChange('region')}
        style={{ minWidth: 150 }}
      >
        <MenuItem value="">Global</MenuItem>
        {regionOptions.map(region => (
          <MenuItem key={region} value={region}>
            {region}
          </MenuItem>
        ))}
      </TextField>

      {/* Location dropdown, only shown when a region is selected */}
      {filters.region && (
        <TextField
          select
          label="Location"
          value={filters.location}
          onChange={handleChange('location')}
          style={{ minWidth: 200 }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(loc => (
            <MenuItem key={loc} value={loc}>
              {loc}
            </MenuItem>
          ))}
        </TextField>
      )}
    </div>
  );
};

export default Filters;


File 4
Summary.card.css
.summary-container {
    padding: 20px;
  }
  
  .summary-cards {
    margin-bottom: 30px;
  }
  
  .cards {
    display: flex;
    gap: 1rem;
    margin-bottom: 20px;
  }
  
  .card {
    background-color: black;
    padding: 10px 20px;
    border-radius: 5px;
    font-size: 1.2rem;
  }
  
  .charts {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    justify-content: space-around;
  }
  
  .chart {
    width: 300px;
    max-width: 100%;
  }


File 5

SummmaryCards.js



import React from 'react';
import './SummaryCards.css';
import { Pie, Bar } from 'react-chartjs-2';
import { Card, CardContent, Typography, Grid } from '@mui/material';
import {
  Chart as ChartJS,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend
);

const COLORS = [
  '#007bff', '#28a745', '#ffc107',
  '#dc3545', '#6f42c1', '#17a2b8',
  '#fd7e14', '#20c997', '#6c757d',
  '#6610f2',
];

export default function SummaryCards({ summary, filters, locationOptions }) {
  const { totalAlarms, responseSentPercentage } = summary;

  // ** Dynamic Partition Chart **
  const makeChartData = (dataObj, title) => {
    const labels = Object.keys(dataObj);
    const counts = labels.map(lbl => dataObj[lbl].count);
    const bg = labels.map((_, i) => COLORS[i % COLORS.length]);

    return { labels, datasets: [{ data: counts, backgroundColor: bg }] };
  };

  // Partition data:
  const partitionObj = !filters.region
    ? summary.regionWise
    : summary.locationWise;

  const partitionTitle = !filters.region
    ? 'Global Partition'
    : `${filters.region} Partition`;

  // The rest of your six charts:
  const chartConfigs = [
    { key: 'priorityWise', title: 'Priority Wise', type: 'pie' },
    { key: 'rejectionTypeWise', title: 'Rejection Type Wise', type: 'pie' },
    { key: 'operatorWise', title: 'Operator Wise', type: 'bar' },
    { key: 'monthWise', title: 'Month Wise', type: 'bar' },
    // you can still include the filtered locationWise if you wish:
    filters.region && { key: 'locationWise', title: 'Location Wise', type: 'pie' },
  ].filter(Boolean);

  return (
    <div className="summary-container">
      <Typography variant="h4" gutterBottom>
        Alarm Summary
      </Typography>

      {/* Top‑left cards */}
      <Grid container spacing={2} className="summary-cards" style={{ marginBottom: 24 }}>
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6">Total Alarms</Typography>
              <Typography variant="h5" color="primary">
                {totalAlarms}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6">Response Sent %</Typography>
              <Typography variant="h5" color="secondary">
                {responseSentPercentage}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Partition Pie Chart */}
      <div className="charts" style={{ justifyContent: 'center' }}>
        <div className="chart">
          <Typography variant="h6" gutterBottom>
            {partitionTitle}
          </Typography>
          <Pie data={makeChartData(partitionObj, partitionTitle)} />
        </div>
      </div>

      {/* Other summary charts */}
      <div className="charts">
        {chartConfigs.map(({ key, title, type }) => {
          const dataObj = summary[key];
          if (!dataObj || Object.keys(dataObj).length === 0) return null;
          const data = makeChartData(dataObj, title);

          return (
            <div className="chart" key={key}>
              <Typography variant="h6" gutterBottom>
                {title}
              </Typography>
              {type === 'pie' ? <Pie data={data} /> : <Bar data={data} />}
            </div>
          );
        })}
      </div>
    </div>
  );
}   



file 6 

Dashboard.js  


// src/pages/Dashboard.js
import React, { useEffect, useState, useMemo } from 'react';
import SummaryCards   from '../components/SummaryCards';
import AlarmCard      from '../components/AlarmCard';
import Filters        from '../components/Filters';
import AlarmsTable    from '../components/AlarmsTable';  // ← adjust to your filename
import { getAlarmSummary, getRawAlarms } from '../services/api';

const Dashboard = () => {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({ region: '', location: '' });

  // 1) Load data
  useEffect(() => {
    getAlarmSummary()
      .then(res => setSummary(res.data))
      .catch(console.error);

    getRawAlarms()
      .then(res => setRawAlarms(res.data))
      .catch(console.error);
  }, []);

  // 2) Build dropdown options (always defined)
  const regionOptions = summary ? Object.keys(summary.regionWise) : [];
  const locationOptions = filters.region
    ? Array.from(new Set(
        rawAlarms
          .filter(a => a.Region === filters.region)
          .map(a => a.Location)
      ))
    : [];

  // 3) Always call this hook (even if summary is null)
  const filteredSummary = useMemo(() => {
    if (!summary) return null;

    const fs = { ...summary };

    if (filters.region) {
      // Only keep selected region
      fs.regionWise = { [filters.region]: summary.regionWise[filters.region] };

      // Build locationWise for that region + optional location filter
      fs.locationWise = {};
      locationOptions
        .filter(loc => !filters.location || loc === filters.location)
        .forEach(loc => {
          fs.locationWise[loc] = summary.locationWise[loc];
        });
    }
    return fs;
  }, [summary, filters, locationOptions]);

  // 4) Early return if still loading
  if (!summary) {
    return <div>Loading dashboard…</div>;
  }

  return (
    <div style={{ padding: 24 }}>
      <h1>Alarm Analysis Dashboard</h1>

      <Filters
        filters={filters}
        setFilters={setFilters}
        regionOptions={regionOptions}
        locationOptions={locationOptions}
      />

      <SummaryCards
        summary={filteredSummary}
        filters={filters}
      />

      {/* Detailed table of all raw alarms */}
      {/* <AlarmsTable alarms={rawAlarms} /> */}

      <AlarmCard />
    </div>
  );
};

export default Dashboard;

