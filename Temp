import React, { useEffect, useState, useMemo } from 'react';
import { Box, Typography, Container } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';

// helper: convert "01-Apr-25" → "2025-04-01"
function toISODate(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  const monthNames = {
    Jan: '01', Feb: '02', Mar: '03', Apr: '04',
    May: '05', Jun: '06', Jul: '07', Aug: '08',
    Sep: '09', Oct: '10', Nov: '11', Dec: '12'
  };
  const mm = monthNames[monAbbr] || '01';
  const yyyy = `20${yy}`;
  return `${yyyy}-${mm}-${d.padStart(2, '0')}`;
}

// helper: format month/year for dropdown (e.g. "Apr 25")
function formatMonthYear(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  return `${monAbbr} ${yy}`;
}

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '',
    location: '',
    month: '',
    date: '',         // ← include date here
    priority: ''
  });

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);

  // 1️⃣ dropdown options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [],
    [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms.filter(a => a.Region === filters.region).map(a => a.Location)
        ))
      : [],
    [rawAlarms, filters.region]
  );
  const monthOptions = useMemo(() => {
    const all = rawAlarms
      .filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      )
      .map(a => formatMonthYear(a.Date));
    return Array.from(new Set(all))
      .sort((a, b) => {
        const [mA, yA] = a.split(' ');
        const [mB, yB] = b.split(' ');
        const dateA = new Date(`20${yA}-${mA}-01`);
        const dateB = new Date(`20${yB}-${mB}-01`);
        return dateA - dateB;
      });
  }, [rawAlarms, filters.region, filters.location]);

  // we no longer need a dateOptions dropdown here—Filters will render a calendar picker

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // 2️⃣ filtered base
  const filtered = useMemo(() => (
    rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)              return false;
      if (filters.location && a.Location !== filters.location)            return false;
      if (filters.month    && formatMonthYear(a.Date) !== filters.month)  return false;
      if (filters.date     && toISODate(a.Date) !== filters.date)        return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    })
  ), [rawAlarms, filters]);

  // 3️⃣ filteredSummary for cards
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };

    if (filters.region) {
      fs.regionWise   = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(l => !filters.location || l === filters.location)
        .forEach(l => {
          fs.locationWise[l] = summary.locationWise[l];
        });
    }

    if (filters.month) {
      const mCount = filtered.filter(a => formatMonthYear(a.Date) === filters.month).length;
      fs.monthWise = { [filters.month]: { count: mCount } };
    } else {
      fs.monthWise = {};
    }

    const opCounts = filtered.reduce((c, a) => {
      const op = a['Name of Person Attending Alarms (First, Last Name)'] || 'Unknown';
      c[op] = (c[op] || 0) + 1;
      return c;
    }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k, v]) => [k, { count: v }])
    );

    return fs;
  }, [summary, filtered, filters, locationOptions]);

  if (!summary) return <Typography>Loading dashboard…</Typography>;

  return (
    <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }}>
      <Box component="header" sx={{
        display: 'flex', alignItems: 'center', justifyContent: 'space-between',
        borderBottom: '3px solid #1976d2', bgcolor: '#e3f2fd', p: 2
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <DashboardIcon fontSize="large" />
          <Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Link to="/">➤ Dashboard</Link>
          <Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{ py: 4 }}>
        <Filters
          filters={filters}
          setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          monthOptions={monthOptions}
          // remove dateOptions prop here
          priorityOptions={priorityOptions}
        />

        <AlarmCard
          summary={filteredSummary}
          rawAlarms={filtered}
          filters={filters}
        />

        <SummaryCards
          summary={filteredSummary}
          filters={filters}
          rawAlarms={filtered}
        />
      </Container>
    </Box>
  );
}









import React from 'react';
import {
  TextField,
  MenuItem,
  Grid,
  InputAdornment
} from '@mui/material';
import PublicIcon from '@mui/icons-material/Public';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import EventIcon from '@mui/icons-material/Event';
import SearchIcon from '@mui/icons-material/Search';
import PriorityHighIcon from '@mui/icons-material/PriorityHigh';

export default function Filters({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = [],
  monthOptions,
  employeeOptions,
  doorOptions,
  priorityOptions,
  rejectionOptions
}) {
  const handleChange = field => e => {
    const value = e.target.value;
    setFilters(prev => {
      const next = { ...prev, [field]: value };
      if (field === 'region') {
        next.location = '';
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'location') {
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'month') {
        next.date = '';
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'date') {
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'priority') {
        next.rejection = '';
      }
      if (field === 'door') {
        next.rejection = '';
      }
      return next;
    });
  };

  return (
    <Grid container spacing={2} alignItems="center" sx={{ mb: 3 }}>
      {/* Region */}
      <Grid item>
        <TextField
          select label="Region" fullWidth
          value={filters.region}
          onChange={handleChange('region')}
          InputProps={{ startAdornment: <InputAdornment position="start"><PublicIcon/></InputAdornment> }}
        >
          <MenuItem value="">All Regions</MenuItem>
          {regionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Location */}
      <Grid item>
        <TextField
          select label="Location" fullWidth
          value={filters.location}
          onChange={handleChange('location')}
          disabled={!filters.region}
          InputProps={{ startAdornment: <InputAdornment position="start"><LocationOnIcon/></InputAdornment> }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(l => <MenuItem key={l} value={l}>{l}</MenuItem>)}
        </TextField>
      </Grid>

      {/* Month */}
      {monthOptions && (
        <Grid item>
          <TextField
            select label="Month" fullWidth
            value={filters.month}
            onChange={handleChange('month')}
            InputProps={{ startAdornment: <InputAdornment position="start"><CalendarMonthIcon/></InputAdornment> }}
          >
            <MenuItem value="">All Months</MenuItem>
            {monthOptions.map(m => <MenuItem key={m} value={m}>{m}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Date as calendar picker */}
      {filters.hasOwnProperty('date') && (
        <Grid item>
          <TextField
            label="Date"
            type="date"
            fullWidth
            value={filters.date}
            onChange={handleChange('date')}
            InputLabelProps={{ shrink: true }}
            InputProps={{ startAdornment: <InputAdornment position="start"><EventIcon/></InputAdornment> }}
          />
        </Grid>
      )}

      {/* Priority */}
      {priorityOptions && (
        <Grid item>
          <TextField
            select label="Priority" fullWidth
            value={filters.priority}
            onChange={handleChange('priority')}
            InputProps={{ startAdornment: <InputAdornment position="start"><PriorityHighIcon/></InputAdornment> }}
          >
            <MenuItem value="">All Priorities</MenuItem>
            {priorityOptions.map(p => <MenuItem key={p} value={p}>{p}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Rejection */}
      {rejectionOptions && (
        <Grid item>
          <TextField
            select label="Rejection" fullWidth
            value={filters.rejection}
            onChange={handleChange('rejection')}
          >
            <MenuItem value="">All Rejections</MenuItem>
            {rejectionOptions.map(r => <MenuItem key={r} value={r}>{r}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Employee */}
      {employeeOptions && (
        <Grid item>
          <TextField
            select label="Employee" fullWidth
            value={filters.employee}
            onChange={handleChange('employee')}
            InputProps={{ startAdornment: <InputAdornment position="start"><SearchIcon/></InputAdornment> }}
          >
            <MenuItem value="">All Employees</MenuItem>
            {employeeOptions.map(e => <MenuItem key={e} value={e}>{e}</MenuItem>)}
          </TextField>
        </Grid>
      )}

      {/* Door */}
      {doorOptions && (
        <Grid item>
          <TextField
            select label="Door" fullWidth
            value={filters.door}
            onChange={handleChange('door')}
          >
            <MenuItem value="">All Doors</MenuItem>
            {doorOptions.map(d => <MenuItem key={d} value={d}>{d}</MenuItem>)}
          </TextField>
        </Grid>
      )}
    </Grid>
  );
}











So raed my Current file and Give Me Both updated js files 
Dont Make another changes 


Dashboard.js


import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';

// helper: convert "01-Apr-25" → "2025-04-01"
function toISODate(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  const monthNames = {
    Jan: '01', Feb: '02', Mar: '03', Apr: '04',
    May: '05', Jun: '06', Jul: '07', Aug: '08',
    Sep: '09', Oct: '10', Nov: '11', Dec: '12'
  };
  const mm = monthNames[monAbbr] || '01';
  const yyyy = `20${yy}`;
  return `${yyyy}-${mm}-${d.padStart(2, '0')}`;
}

// helper: format month/year for dropdown (e.g. "Apr 25")
function formatMonthYear(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  return `${monAbbr} ${yy}`;
}

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '', location: '', month: '', date: '', priority: ''
  });

  // load once
  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);

  // 1️⃣ dropdown options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [],
    [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms.filter(a => a.Region === filters.region).map(a => a.Location)
        ))
      : [],
    [rawAlarms, filters.region]
  );
  const monthOptions = useMemo(() => {
    const all = rawAlarms
      .filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      )
      .map(a => formatMonthYear(a.Date));
    return Array.from(new Set(all))
      .sort((a, b) => {
        // parse back to YYYY-MM for correct sort
        const [mA, yA] = a.split(' ');
        const [mB, yB] = b.split(' ');
        const dateA = new Date(`20${yA}-${mA}-01`);
        const dateB = new Date(`20${yB}-${mB}-01`);
        return dateA - dateB;
      });
  }, [rawAlarms, filters.region, filters.location]);

  // full-date ISO options (for the Date picker)
  const dateOptions = useMemo(() => {
    const all = rawAlarms.map(a => toISODate(a.Date));
    return Array.from(new Set(all))
      .sort();
  }, [rawAlarms]);

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // 2️⃣ filtered base
  const filtered = useMemo(() => (
    rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)        return false;
      if (filters.location && a.Location !== filters.location)      return false;
      if (filters.month    && formatMonthYear(a.Date) !== filters.month) return false;
      if (filters.date     && toISODate(a.Date) !== filters.date)   return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    })
  ), [rawAlarms, filters]);

  // 3️⃣ filteredSummary for cards
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };

    // region/location slice
    if (filters.region) {
      fs.regionWise = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(l => !filters.location || l === filters.location)
        .forEach(l => {
          fs.locationWise[l] = summary.locationWise[l];
        });
    }

    // monthWise
    if (filters.month) {
      const mCount = filtered.filter(a => formatMonthYear(a.Date) === filters.month).length;
      fs.monthWise = { [filters.month]: { count: mCount } };
    } else {
      fs.monthWise = {};
    }

    // operatorWise
    const opCounts = filtered.reduce((c, a) => {
      const op = a['Name of Person Attending Alarms (First, Last Name)'] || 'Unknown';
      c[op] = (c[op] || 0) + 1;
      return c;
    }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k, v]) => [k, { count: v }])
    );

    return fs;
  }, [summary, filtered, filters, locationOptions]);

  if (!summary) {
    return <Typography>Loading dashboard…</Typography>;
  }

  return (
    <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }}>
      <Box component="header" sx={{
        display: 'flex', alignItems: 'center', justifyContent: 'space-between',
        borderBottom: '3px solid #1976d2', bgcolor: '#e3f2fd', p: 2
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <DashboardIcon fontSize="large" />
          <Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Link to="/">➤ Dashboard</Link>
          <Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{ py: 4 }}>
        <Filters
          filters={filters}
          setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          monthOptions={monthOptions}
         dateOptions={dateOptions}
          priorityOptions={priorityOptions}
        />

        {/* cards */}
        <AlarmCard
          summary={filteredSummary}
          rawAlarms={filtered}
          filters={filters}
        />

        {/* charts */}
        <SummaryCards
          summary={filteredSummary}
          filters={filters}
          rawAlarms={filtered}
        />
      </Container>
    </Box>
  );
}






file 2


Filters.js


import React from 'react';
import {
  TextField,
  MenuItem,
  Grid,
  InputAdornment
} from '@mui/material';
import PublicIcon from '@mui/icons-material/Public';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import EventIcon from '@mui/icons-material/Event';
import SearchIcon from '@mui/icons-material/Search';
import PriorityHighIcon from '@mui/icons-material/PriorityHigh';

export default function Filters({
  filters,
  setFilters,
  regionOptions = [],
  locationOptions = [],
  monthOptions,
 dateOptions,
  employeeOptions,
  doorOptions,
  priorityOptions,
  rejectionOptions
}) {
  const handleChange = field => e => {
    const value = e.target.value;
    setFilters(prev => {
      const next = { ...prev, [field]: value };
      // cascade resets (unchanged)
      if (field === 'region') {
        next.location = '';
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'location') {
        next.month = '';
        next.date = '';
        next.priority = '';
        next.rejection = '';
        next.employee = '';
        next.door = '';
      }
      if (field === 'month') {
        next.date = '';
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'date') {
        next.priority = '';
        next.rejection = '';
      }
      if (field === 'priority') {
        next.rejection = '';
      }
      if (field === 'door') {
        next.rejection = '';
      }
      return next;
    });
  };

  return (
    <Grid container spacing={2} alignItems="center" sx={{ mb: 3 }}>
      {/* Region */}
      <Grid item>
        <TextField
          select label="Region" fullWidth
          value={filters.region}
          onChange={handleChange('region')}
          InputProps={{
            startAdornment: <InputAdornment position="start"><PublicIcon/></InputAdornment>
          }}
        >
          <MenuItem value="">All Regions</MenuItem>
          {regionOptions.map(r => (
            <MenuItem key={r} value={r}>{r}</MenuItem>
          ))}
        </TextField>
      </Grid>

      {/* Location */}
      <Grid item>
        <TextField
          select label="Location" fullWidth
          value={filters.location}
          onChange={handleChange('location')}
          disabled={!filters.region}
          InputProps={{
            startAdornment: <InputAdornment position="start"><LocationOnIcon/></InputAdornment>
          }}
        >
          <MenuItem value="">All Locations</MenuItem>
          {locationOptions.map(l => (
            <MenuItem key={l} value={l}>{l}</MenuItem>
          ))}
        </TextField>
      </Grid>

      {/* Month */}
      {monthOptions && (
        <Grid item>
          <TextField
            select label="Month" fullWidth
            value={filters.month}
            onChange={handleChange('month')}
            InputProps={{
              startAdornment: <InputAdornment position="start"><CalendarMonthIcon/></InputAdornment>
            }}
          >
            <MenuItem value="">All Months</MenuItem>
            {monthOptions.map(m => (
              <MenuItem key={m} value={m}>{m}</MenuItem>
            ))}
          </TextField>
        </Grid>
      )}

      {/* Date */}
      {dateOptions && (
        <Grid item>
          <TextField
            select label="Date" fullWidth
            value={filters.date}
            onChange={handleChange('date')}
            InputProps={{
              startAdornment: <InputAdornment position="start"><EventIcon/></InputAdornment>
            }}
          >
            <MenuItem value="">All Dates</MenuItem>
            {dateOptions.map(d => (
              <MenuItem key={d} value={d}>{d}</MenuItem>
            ))}
          </TextField>
        </Grid>
      )}

      {/* Priority */}
      {priorityOptions && (
        <Grid item>
          <TextField
            select label="Priority" fullWidth
            value={filters.priority}
            onChange={handleChange('priority')}
            InputProps={{
              startAdornment: <InputAdornment position="start"><PriorityHighIcon/></InputAdornment>
            }}
          >
            <MenuItem value="">All Priorities</MenuItem>
            {priorityOptions.map(p => (
              <MenuItem key={p} value={p}>{p}</MenuItem>
            ))}
          </TextField>
        </Grid>
      )}

      {/* Remaining filters unchanged… */}
      {rejectionOptions && (
        <Grid item>
          <TextField
            select label="Rejection" fullWidth
            value={filters.rejection}
            onChange={handleChange('rejection')}
          >
            <MenuItem value="">All Rejections</MenuItem>
            {rejectionOptions.map(r => (
              <MenuItem key={r} value={r}>{r}</MenuItem>
            ))}
          </TextField>
        </Grid>
      )}
      {employeeOptions && (
        <Grid item>
          <TextField
            select label="Employee" fullWidth
            value={filters.employee}
            onChange={handleChange('employee')}
            InputProps={{
              startAdornment: <InputAdornment position="start"><SearchIcon/></InputAdornment>
            }}
          >
            <MenuItem value="">All Employees</MenuItem>
            {employeeOptions.map(e => (
              <MenuItem key={e} value={e}>{e}</MenuItem>
            ))}
          </TextField>
        </Grid>
      )}
      {doorOptions && (
        <Grid item>
          <TextField
            select label="Door" fullWidth
            value={filters.door}
            onChange={handleChange('door')}
          >
            <MenuItem value="">All Doors</MenuItem>
            {doorOptions.map(d => (
              <MenuItem key={d} value={d}>{d}</MenuItem>
            ))}
          </TextField>
        </Grid>
      )}
    </Grid>
  );
}




