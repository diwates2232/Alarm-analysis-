

--- a/src/components/SummaryCards.js
+++ b/src/components/SummaryCards.js
@@ export default function SummaryCards({ summary, filters, rawAlarms }) {
   // --- 2. Filter rawAlarms by region, location, month ---
   const filtered = rawAlarms.filter(a => {
     if (filters.region && a.Region !== filters.region) return false;
     if (filters.location && a.Location !== filters.location) return false;
     if (filters.month && a.Month !== filters.month) return false;
     if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
     return true;
   });
@@
   // --- 7. Location Wise (was using summary.locationWise) ---
-  const locLabels = Object.keys(locationWise);
-  const locValues = locLabels.map(l => locationWise[l].count || 0);
-  const locColors = defaultColors.slice(0, locLabels.length);
+  const locCounts = filtered.reduce((acc, a) => {
+    acc[a.Location] = (acc[a.Location] || 0) + 1;
+    return acc;
+  }, {});
+  const locLabels = Object.keys(locCounts);
+  const locValues = locLabels.map(l => locCounts[l]);
+  const locColors = defaultColors.slice(0, locLabels.length);
 
   return (
@@
         {locLabels.length > 0 && (
           <Grid item xs={400} md={200}>
             <Card sx={{ border: '1px solid #ccc' }}>
               <CardContent>
                 <Typography variant="h6" gutterBottom>Location Wise</Typography>
-                <MyChart
+                <MyChart
                   type="line"
-                  data={{ labels: locLabels, values: locValues, bgColors: locColors, borderColor: locColors }}
+                  data={{ labels: locLabels, values: locValues, bgColors: locColors, borderColor: locColors }}
                   options={{
                     scales: {
                       x: { title: { display: true, text: 'Location' } },
                       y: { title: { display: true, text: 'Alarm Count' } }
                     }
                   }}
                   height={600}
                   width={900}
                 />
               </CardContent>
             </Card>
           </Grid>





read Carefully dashboard.js File carefully.
In Dashboard There is a One issue .When i select priority all data are Filtered Succesfully.
But Total Alarms count , And responce Sent Percentage are not Update
Solve this issue and give me Updated js file carefully .dont make changes in another function

import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';

export default function Dashboard() {
  const [summary, setSummary] = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters] = useState({
    region: '', location: '', month: '', priority: ''
  });

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);

  // 1) options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [], [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms.filter(a => a.Region === filters.region).map(a => a.Location)
        ))
      : [], [rawAlarms, filters.region]
  );
  const monthOptions = useMemo(
    () => Array.from(new Set(
          rawAlarms
            .filter(a => (!filters.region || a.Region === filters.region) &&
                         (!filters.location || a.Location === filters.location))
            .map(a => a.Month)
        ))
        .sort((a,b)=> a.localeCompare(b)),
    [rawAlarms, filters.region, filters.location]
  );
  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // 2) filtered base for cards & charts
  const filtered = useMemo(() => {
    return rawAlarms.filter(a => {
      if (filters.region && a.Region !== filters.region) return false;
      if (filters.location && a.Location !== filters.location) return false;
      if (filters.month && a.Month !== filters.month) return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    });
  }, [rawAlarms, filters]);

  // 3) summary slice for cards/charts
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    // keep rejectionTypeWise, then overwrite regionWise/monthWise/locationWise/operatorWise
    const fs = { ...summary };

    // regionWise & locationWise
    if (filters.region) {
      fs.regionWise = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(l => !filters.location || l === filters.location)
        .forEach(l => {
          fs.locationWise[l] = summary.locationWise[l];
        });
    }

    // monthWise
    if (filters.month) {
      const mCount = filtered.filter(a => a.Month === filters.month).length;
      fs.monthWise = { [filters.month]: { count: mCount } };
    } else {
      fs.monthWise = {}; // we’ll build from filtered raw
    }

    // operatorWise
    const opCounts = filtered.reduce((c,a)=>{
      const op = a['Name of Person Attending Alarms (First, Last Name)']||'Unknown';
      c[op] = (c[op]||0) + 1;
      return c;
    }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k,v])=>[k,{count:v}])
    );

    return fs;
  }, [summary, filtered, filters, locationOptions]);

  if (!summary) return <Typography>Loading dashboard…</Typography>;

  return (
    <Box sx={{ width:'100vw', minHeight:'100vh', overflowX:'hidden' }}>
      <Box component="header" sx={{
        display:'flex', alignItems:'center', justifyContent:'space-between',
        borderBottom:'3px solid #1976d2', bgcolor:'#e3f2fd', p:2
      }}>
        <Box sx={{ display:'flex', alignItems:'center', gap:1 }}>
          <DashboardIcon fontSize="large" /><Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{ display:'flex', gap:2 }}>
          <Link to="/">➤ Dashboard</Link><Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{ py:4 }}>
        <Filters
          filters={filters} setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          monthOptions={monthOptions}
          priorityOptions={priorityOptions}
        />

        {/* cards (top row) */}
        <AlarmCard
          summary={filteredSummary}
          rawAlarms={rawAlarms}
          filters={filters}
        />

        {/* charts */}
        <SummaryCards
          summary={filteredSummary}
          filters={filters}
          rawAlarms={filtered}
        />
      </Container>
    </Box>
  );
}
