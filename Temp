npm uninstall react-router-dom
npm install react-router-dom@5


// craco.config.js
const webpack = require('webpack');

module.exports = {
  babel: {
    plugins: [
      '@babel/plugin-proposal-optional-chaining',
      '@babel/plugin-proposal-nullish-coalescing-operator'
    ]
  },
  webpack: {
    configure: (webpackConfig) => {
      // Handle .mjs properly
      webpackConfig.module.rules.push({
        test: /\.mjs$/,
        include: /node_modules/,
        type: 'javascript/auto',
      });

      // Polyfill process for browser
      webpackConfig.resolve = webpackConfig.resolve || {};
      webpackConfig.resolve.alias = {
        ...(webpackConfig.resolve.alias || {}),
        process: require.resolve('process/browser.js'),
      };

      webpackConfig.plugins.push(
        new webpack.ProvidePlugin({
          process: 'process/browser',
        })
      );

      return webpackConfig;
    },
  },
};





"scripts": {
  "start": "CHOKIDAR_USEPOLLING=true react-scripts --openssl-legacy-provider start"
}



npx rimraf node_modules
npm cache clean --force
npm install
npm start







npx rimraf node_modules/.cache
npm cache clean --force


// craco.config.js
const webpack = require('webpack');

module.exports = {
  babel: {
    plugins: [
      '@babel/plugin-proposal-optional-chaining',
      '@babel/plugin-proposal-nullish-coalescing-operator'
    ]
  },

  webpack: {
    configure: (webpackConfig) => {
      // 1) Enable .mjs support in node_modules
      webpackConfig.module.rules.push({
        test: /\.mjs$/,
        include: /node_modules/,
        type: 'javascript/auto'
      });

      // 2) Polyfill process.env if needed
      webpackConfig.resolve = webpackConfig.resolve || {};
      webpackConfig.resolve.alias = {
        ...(webpackConfig.resolve.alias || {}),
        process: require.resolve('process/browser.js')
      };
      webpackConfig.plugins.push(
        new webpack.ProvidePlugin({
          process: 'process/browser'
        })
      );

      return webpackConfig;
    }
  }
};












// craco.config.js
const webpack = require('webpack');
const path = require('path');

module.exports = {
  babel: {
    plugins: [
      '@babel/plugin-proposal-optional-chaining',
      '@babel/plugin-proposal-nullish-coalescing-operator'
    ]
  },
  webpack: {
    configure: (config) => {
      // 1) Treat react-router-dom imports as the CJS build:
      config.resolve.alias = {
        ...(config.resolve.alias || {}),
        // everything that starts with "react-router-dom" goes to its index.js
        'react-router-dom$': path.resolve(
          __dirname,
          'node_modules/react-router-dom/index.js'
        )
      };

      // 2) Make sure we don’t try to parse any .mjs files:
      config.resolve.extensions = ['.js', '.jsx', '.ts', '.tsx'];

      // 3) Prevent chokidar from choking on your DumpStack.log.tmp:
      config.watchOptions = {
        ignored: [
          /node_modules/,
          /C:\\DumpStack\.log\.tmp$/
        ]
      };

      // 4) If you still need a browser "process" shim:
      config.plugins.push(
        new webpack.ProvidePlugin({
          process: 'process/browser'
        })
      );

      return config;
    }
  }
};











// craco.config.js
const webpack = require('webpack');

module.exports = {
  babel: {
    plugins: [
      '@babel/plugin-proposal-optional-chaining',
      '@babel/plugin-proposal-nullish-coalescing-operator'
    ]
  },
  webpack: {
    configure: (config) => {
      // 1) Tell Webpack to use "main" (CJS) before "module" (ESM).
      //    This means it will load react-router-dom’s CJS bundle.
      config.resolve.mainFields = ['browser', 'main'];

      // 2) Drop ".mjs" from the extensions list so .mjs files aren’t picked up.
      config.resolve.extensions = ['.js', '.jsx', '.ts', '.tsx'];

      // 3) Prevent the watcher from scanning locked .tmp files (and node_modules).
      config.watchOptions = {
        ignored: [
          /node_modules/,
          /DumpStack\.log\.tmp$/
        ]
      };

      // 4) (Optional) If you still need `process.env` shim in the browser:
      config.plugins.push(
        new webpack.ProvidePlugin({
          process: 'process/browser'
        })
      );

      return config;
    }
  }
};











// craco.config.js
const path = require('path');
const webpack = require('webpack');

module.exports = {
  babel: {
    plugins: [
      '@babel/plugin-proposal-optional-chaining',
      '@babel/plugin-proposal-nullish-coalescing-operator'
    ]
  },
  webpack: {
    configure: (config) => {
      // 1) Alias the ESM entry to the CJS build so Webpack never tries to parse the .mjs
      config.resolve = config.resolve || {};
      config.resolve.alias = {
        ...(config.resolve.alias || {}),
        // Point any import of that .mjs file to the CJS bundle
        'react-router-dom/dist/index.mjs': path.resolve(
          __dirname,
          'node_modules/react-router-dom/dist/react-router-dom.cjs.js'
        )
      };

      // 2) Restrict extensions so .mjs isn’t auto-selected
      config.resolve.extensions = ['.js', '.jsx', '.ts', '.tsx'];

      // 3) Globally ignore any *.tmp (including DumpStack.log.tmp) from watch
      config.watchOptions = {
        ignored: [
          /node_modules/,
          /\.tmp$/,
          // On Windows the locked file
          /DumpStack\.log\.tmp$/
        ]
      };

      // 4) Provide `process` shim (optional, if you still need it)
      config.plugins.push(
        new webpack.ProvidePlugin({
          process: 'process/browser'
        })
      );

      return config;
    }
  }
};









read carefully and identify Where is issue and solve it


Node.js v22.14.0

C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend>npm start

> alarm-frontend@0.1.0 start
> react-scripts --openssl-legacy-provider start
? Something is already running on port 3000.

Would you like to run the app on another port instead? Yes
Starting the development server...

(node:35188) [DEP0060] DeprecationWarning: The `util._extend` API is deprecated. Please use Object.assign() instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
Failed to compile.

./node_modules/react-router-dom/dist/index.mjs
Can't reexport the namespace object from non EcmaScript module (only default export is available)
Error from chokidar (C:\): Error: EBUSY: resource busy or locked, lstat 'C:\DumpStack.log.tmp'
