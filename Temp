set NODE_OPTIONS=--openssl-legacy-provider
npm start




"scripts": {



*If that exact placement errors, instead try:*

```diff
"start": "cross-env NODE_OPTIONS=--openssl-legacy-provider react-scripts start"









C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend>npm start

> alarm-frontend@0.1.0 start
> react-scripts start
? Something is already running on port 3000.

Would you like to run the app on another port instead? Yes
Starting the development server...

Error: error:0308010C:digital envelope routines::unsupported
    at new Hash (node:internal/crypto/hash:79:19)
    at Object.createHash (node:crypto:139:10)
    at module.exports (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\util\createHash.js:90:53)
    at NormalModule._initBuildHash (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\NormalModule.js:401:16)
    at handleParseError (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\NormalModule.js:449:10)
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\NormalModule.js:481:5
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\NormalModule.js:342:12
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:373:3
    at iterateNormalLoaders (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:214:10)
    at iterateNormalLoaders (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:221:10)
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:236:3
    at runSyncOrAsync (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:130:11)
    at iterateNormalLoaders (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:232:2)
    at Array.<anonymous> (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:205:4)
    at Storage.finished (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\enhanced-resolve\lib\CachedInputFileSystem.js:55:16)
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\enhanced-resolve\lib\CachedInputFileSystem.js:91:9
(node:29848) [DEP0060] DeprecationWarning: The `util._extend` API is deprecated. Please use Object.assign() instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\react-scripts\scripts\start.js:19
  throw err;
  ^

Error: error:0308010C:digital envelope routines::unsupported
    at new Hash (node:internal/crypto/hash:79:19)
    at Object.createHash (node:crypto:139:10)
    at module.exports (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\util\createHash.js:90:53)
    at NormalModule._initBuildHash (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\NormalModule.js:401:16)
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\NormalModule.js:433:10
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\webpack\lib\NormalModule.js:308:13
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:367:11
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:233:18
    at context.callback (C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\loader-runner\lib\LoaderRunner.js:111:13)
    at C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\node_modules\babel-loader\lib\index.js:51:103
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5) {
  opensslErrorStack: [
    'error:03000086:digital envelope routines::initialization error',
    'error:0308010C:digital envelope routines::unsupported'
  ],
  library: 'digital envelope routines',
  reason: 'unsupported',
  code: 'ERR_OSSL_EVP_UNSUPPORTED'
}



















AlarmsTable.js

iimport React from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { Button } from '@mui/material';
import * as XLSX from 'xlsx';

const AlarmsTable = ({ alarms }) => {
  const exportToExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet(alarms);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Alarms');
    XLSX.writeFile(workbook, 'alarms.xlsx');
  };

  const columns = [
    { field: 'Sr. No', headerName: 'Sr. No', width: 90 },
    { field: 'Date', headerName: 'Date', width: 120 },
    { field: 'Time of Alarm (Local time)', headerName: 'Time', width: 150 },
    { field: 'Region', headerName: 'Region', width: 120 },
    { field: 'Rejection', headerName: 'Rejection', width: 150 },
    { field: 'CCURE Incident Priority', headerName: 'Priority', width: 150 },
    { field: 'Name of Person Attending Alarms (First, Last Name)', headerName: 'Operator', width: 200 },
    { field: 'Action Taken', headerName: 'Action Taken', width: 150 },
    { field: 'Time Taken (Min)', headerName: 'Time Taken (Min)', width: 150 },
    // Add other necessary fields
  ];

  const rows = alarms.map((alarm, index) => ({
    id: index,
    ...alarm,
  }));

  return (
    <div style={{ height: 600, width: '100%' }}>
      <Button variant="contained" color="primary" onClick={exportToExcel}>
        Export to Excel
      </Button>
      <DataGrid
        rows={rows}
        columns={columns}
        getRowClassName={(params) =>
          params.row['Time Taken (Min)'] > 0 ? 'sla-breach' : ''
        }
        pageSize={10}
        rowsPerPageOptions={[10, 20, 50]}
      />
    </div>
  );
};

export default AlarmsTable;





chart.js


import React, { useEffect, useRef } from 'react';
import {
  Chart,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend,
} from 'chart.js';

// Register required Chart.js components
Chart.register(ArcElement, CategoryScale, LinearScale, BarElement, Tooltip, Legend);

const MyChart = ({ data }) => {
  const chartRef = useRef(null);
  const chartInstance = useRef(null);

  useEffect(() => {
    const ctx = chartRef.current.getContext('2d');

    // Destroy existing chart instance if it exists
    if (chartInstance.current) {
      chartInstance.current.destroy();
    }

    // Define chart configuration
    const config = {
      type: 'bar', // Change to 'doughnut', 'line', etc. as needed
      data: {
        labels: data.labels,
        datasets: [{
          label: 'My Dataset',
          data: data.values,
          backgroundColor: [
            '#8884d8',
            '#82ca9d',
            '#ffc658',
            '#ff7f50',
            '#a29bfe',
          ],
          borderWidth: 1,
        }],
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            enabled: true,
          },
        },
        scales: {
          x: {
            beginAtZero: true,
          },
          y: {
            beginAtZero: true,
          },
        },
      },
    };

    // Create new chart instance
    chartInstance.current = new Chart(ctx, config);
  }, [data]);

  return (
    <div style={{ width: '100%', height: '400px' }}>
      <canvas ref={chartRef}></canvas>
    </div>
  );
};

export default MyChart;



SummaryCard.js

import React from 'react';
import './SummaryCards.css'; // Optional custom styles
import { Pie, Bar } from 'react-chartjs-2';
import { Card, CardContent, Typography, Grid } from '@mui/material';

const SummaryCards = ({ summary }) => {
  if (!summary) return null;

  const { totalAlarms, responseSentPercentage, regionWise, priorityWise, rejectionTypeWise, operatorWise } = summary;

  const regionChart = {
    labels: Object.keys(regionWise || {}),
    datasets: [{
      data: Object.values(regionWise || {}).map(r => r.count),
      backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1']
    }]
  };

  const priorityChart = {
    labels: Object.keys(priorityWise || {}),
    datasets: [{
      data: Object.values(priorityWise || {}).map(p => p.count),
      backgroundColor: ['#6c757d', '#17a2b8', '#fd7e14', '#20c997']
    }]
  };

  const operatorChart = {
    labels: Object.keys(operatorWise || {}),
    datasets: [{
      label: 'Alarm Count',
      data: Object.values(operatorWise || {}).map(o => o.count),
      backgroundColor: '#007bff'
    }]
  };

  return (
    <div className="summary-container">
      <h2>Alarm Summary</h2>

      {/* MUI Cards Summary */}
      <Grid container spacing={2} className="summary-cards">
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6">Total Alarms</Typography>
              <Typography variant="h5" color="primary">{totalAlarms}</Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6">Response Sent</Typography>
              <Typography variant="h5" color="secondary">{responseSentPercentage}</Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Charts Section */}
      <div className="charts">
        <div className="chart">
          <h4>Region Wise</h4>
          <Pie data={regionChart} />
        </div>
        <div className="chart">
          <h4>Priority Wise</h4>
          <Pie data={priorityChart} />
        </div>
        <div className="chart">
          <h4>Operator Wise</h4>
          <Bar data={operatorChart} />
        </div>
      </div>
    </div>
  );
};

export default SummaryCards;




App.js

import React from 'react';
import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import RawAlarms from './pages/RawAlarms';

function App() {
  return (
    <Router>
      <div>
        <nav style={{ padding: '10px', background: '#f0f0f0' }}>
          <Link to="/" style={{ marginRight: '10px' }}>Dashboard</Link>
          <Link to="/alarms">Raw Alarms</Link>
        </nav>
        <Routes>
          <Route path="/" element={<Dashboard />} />
          <Route path="/alarms" element={<RawAlarms />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;

