read below chart.js js 

and error message is 
Failed to compile.

./src/components/Chart.js
  Line 149:5:  Expected an assignment or function call and instead saw an expression  no-unused-expressions

Search for the keywords to learn more about each error.
Compiling...
Failed to compile.






// src/components/Chart.js
import React, { useEffect, useRef } from 'react';
import Chart from 'chart.js/auto';
import ChartDataLabels from 'chartjs-plugin-datalabels';

// stronger, fixed palette
const defaultColors = [
  '#3366CC', '#DC3912', '#FF9900', '#109618',
  '#990099', '#0099C6', '#DD4477', '#66AA00',
  '#B82E2E', '#316395'
];

export default function MyChart({
  type = 'bar',
  data,
  options = {},
  width = '100%',
  height = '100%'
}) {
  const canvasRef = useRef(null);
  const chartRef  = useRef(null);

  //Register the datalabels plugin once
  useEffect(() => {
    Chart.register(ChartDataLabels);
  }, []);

  useEffect(() => {
    if (!canvasRef.current) return;
    const ctx = canvasRef.current.getContext('2d');
    chartRef.current?.destroy();                              // line 149

    // Prepare datasets with boxed labels
    const datasets = Array.isArray(data.datasets)
      ? data.datasets.map(ds => ({
          ...ds,
          borderWidth: 2,
          fill: ds.fill ?? false,
          datalabels: {
            display: true,
            formatter: v => v,
            font: { weight: 'bold' },
            color: '#000',
            backgroundColor: 'rgba(255,255,255,0.8)',
            borderRadius: 4,
            padding: 4,
            anchor: 'end',
            align: 'top',
            clip: false  // allow beyond chart area
          }
        }))
      : (() => {
          const bg = data.bgColors || defaultColors.slice(0, data.values.length);
          const border = data.borderColor || bg;
          return [{
            label: data.label || '',
            data: data.values,
            backgroundColor: bg,
            borderColor: border,
            borderWidth: 2,
            ...(type === 'line' && { tension: 0.3, pointRadius: 6 }),
            datalabels: {
              display: true,
              formatter: v => v,
              font: { weight: 'bold' },
              color: '#000',
              backgroundColor: 'rgba(255,255,255,0.8)',
              borderRadius: 4,
              padding: 4,
              anchor: 'end',
              align: 'top',
              clip: false
            }
          }];
        })();

    chartRef.current = new Chart(ctx, {
      type,
      data: {
        labels: data.labels,
        datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: { duration: 800 },
        plugins: {
          legend: { labels: { font: { size: 14 } } },
          datalabels: {
            // ensure labels can render outside dataset elements
            clip: false
          }
        },
        scales: {
          x: { beginAtZero: true, ...(options.scales?.x || {}) },
          y: { beginAtZero: true, ...(options.scales?.y || {}) }
        },
        ...options
      }
    });

    return () => chartRef.current?.destroy();
  }, [type, data, options]);

  return (
    <div style={{ width, height, border: '1px solid #ccc', borderRadius: 4, padding: 8 }}>
      <canvas ref={canvasRef} />
    </div>
  );
}

