
// src/components/AlarmCard.js
import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary, rawAlarms, filters }) {
  if (!summary) return null;

  // 1) apply all filters (region, location, month, priority)
  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                             return false;
    if (filters.location && a.Location !== filters.location)                           return false;
    if (filters.month    && a.Month    !== filters.month)                              return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)         return false;
    return true;
  });

  const totalAlarms = filtered.length;

  // normalize helper
  const normalize = str => (str || '').toString().trim().toLowerCase();

  // 2) counts per your rules
  const responseSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'response sent'
  ).length;

  const notSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'not sent'
  ).length;

  const reoccurredCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'yes' &&
    normalize(a['Action Taken']) === 'reoccured'
  ).length;

  const responseSentPercentage = totalAlarms
    ? `${((responseSentCount / totalAlarms) * 100).toFixed(2)}%`
    : '0%';

  return (
    <Grid container spacing={2} sx={{ mb: 3 }}>
      {/* Total Alarms */}
      <Grid item xs={12} sm={6} md={2}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1">Total Alarms</Typography>
            <Typography variant="h4">{totalAlarms}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Response Sent */}
      <Grid item xs={12} sm={6} md={2}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1">Response Sent</Typography>
            <Typography variant="h4">{responseSentCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Not Sent */}
      <Grid item xs={12} sm={6} md={2}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1">Not Sent</Typography>
            <Typography variant="h4">{notSentCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Re-occurred */}
      <Grid item xs={12} sm={6} md={2}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1">Re-occurred</Typography>
            <Typography variant="h4">{reoccurredCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Response Sent % */}
      <Grid item xs={12} sm={6} md={2}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1">Response Sent %</Typography>
            <Typography variant="h4">{responseSentPercentage}</Typography>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
}









// src/components/AlarmCard.js
import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary, rawAlarms, filters }) {
  if (!summary) return null;

  // 1) Apply all filters (region, location, month, priority)
  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                             return false;
    if (filters.location && a.Location !== filters.location)                           return false;
    if (filters.month    && a.Month    !== filters.month)                              return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)         return false;
    return true;
  });

  const totalAlarms = filtered.length;

  // 2) Normalize "Action Taken" once
  const normalize = str => (str || '').toString().trim().toLowerCase();

  // 3) Count "not sent" exactly, everything else counts as "sent"
  const notSentCount = filtered.filter(a => normalize(a['Action Taken']) === 'not sent').length;
  const sentCount    = totalAlarms - notSentCount;

  // 4) Count re-occurred
  const reoccurredCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'yes'
  ).length;

  // 5) Percentage of sent
  const responseSentPercentage = totalAlarms
    ? `${((sentCount / totalAlarms) * 100).toFixed(2)}%`
    : '0%';

  return (
    <Grid container spacing={2} sx={{ mb: 3 }}>
      {/* Total Alarms */}
      <Grid item xs={12} sm={6} md={2.4}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Total Alarms
            </Typography>
            <Typography variant="h4">{totalAlarms}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Response Sent */}
      <Grid item xs={12} sm={6} md={2.4}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Response Sent
            </Typography>
            <Typography variant="h4">{sentCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Not Sent */}
      <Grid item xs={12} sm={6} md={2.4}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Not Sent
            </Typography>
            <Typography variant="h4">{notSentCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Re-occurred */}
      <Grid item xs={12} sm={6} md={2.4}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Re-occurred
            </Typography>
            <Typography variant="h4">{reoccurredCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Response Sent % */}
      <Grid item xs={12} sm={6} md={2.4}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Response Sent %
            </Typography>
            <Typography variant="h4">{responseSentPercentage}</Typography>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
}












// src/components/AlarmCard.js
import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary, rawAlarms, filters }) {
  if (!summary) return null;

  // apply all filters (region, location, month, priority) to raw alarms
  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                             return false;
    if (filters.location && a.Location !== filters.location)                           return false;
    if (filters.month    && a.Month    !== filters.month)                              return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)         return false;
    return true;
  });

  const totalAlarms = filtered.length;

  // normalize Action Taken for exact matching
  const actionOf = a => (a['Action Taken'] || '').trim().toLowerCase();

  // count strictly "sent" vs "not sent"
  const sentCount    = filtered.filter(a => actionOf(a) === 'sent').length;
  const notSentCount = filtered.filter(a => actionOf(a) === 'not sent').length;

  // re-occurred count
  const reoccurredCount = filtered.filter(a =>
    (a['If Reoccured Yes/No'] || '').trim().toLowerCase() === 'yes'
  ).length;

  // percentage of sent (only those exactly marked "sent")
  const responseSentPercentage = totalAlarms
    ? `${((sentCount / totalAlarms) * 100).toFixed(2)}%`
    : '0%';

  return (
    <Grid container spacing={2} sx={{ mb: 3 }}>
      {/* Total Alarms */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Total Alarms
            </Typography>
            <Typography variant="h4">{totalAlarms}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Response Sent Count */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Response Sent
            </Typography>
            <Typography variant="h4">{sentCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Not Sent Count */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Not Sent
            </Typography>
            <Typography variant="h4">{notSentCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Re-occurred Count */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Re-occurred
            </Typography>
            <Typography variant="h4">{reoccurredCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Response Sent % */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Response Sent %
            </Typography>
            <Typography variant="h4">{responseSentPercentage}</Typography>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
}











// src/components/AlarmCard.js
import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary, rawAlarms, filters }) {
  if (!summary) return null;

  // apply all filters (region, location, month, priority) to raw alarms
  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                             return false;
    if (filters.location && a.Location !== filters.location)                           return false;
    if (filters.month    && a.Month    !== filters.month)                              return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)         return false;
    return true;
  });

  const totalAlarms     = filtered.length;
  const sentCount       = filtered.filter(a =>
    a['Action Taken'] && a['Action Taken'] !== 'Not Sent'
  ).length;
  const notSentCount    = filtered.filter(a =>
    !a['Action Taken'] || a['Action Taken'] === 'Not Sent'
  ).length;
  const reoccurredCount = filtered.filter(a =>
    a['If Reoccured Yes/No'] && a['If Reoccured Yes/No'].toLowerCase() === 'yes'
  ).length;

  const responseSentPercentage = totalAlarms
    ? `${((sentCount / totalAlarms) * 100).toFixed(2)}%`
    : '0%';

  return (
    <Grid container spacing={2} sx={{ mb: 3 }}>
      {/* Total Alarms */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Total Alarms
            </Typography>
            <Typography variant="h4">{totalAlarms}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Response Sent Count */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Response Sent
            </Typography>
            <Typography variant="h4">{sentCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Not Sent Count */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Not Sent
            </Typography>
            <Typography variant="h4">{notSentCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Re-occurred Count */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Re-occurred
            </Typography>
            <Typography variant="h4">{reoccurredCount}</Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* Response Sent % */}
      <Grid item xs={12} sm={6} md={3}>
        <Card>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              Response Sent %
            </Typography>
            <Typography variant="h4">{responseSentPercentage}</Typography>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
}













[
  {
    "Sr. No": 1,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "05:21:18",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_9th Flr_Main Entrance",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Manisha Choudhari",
    "Employee Name": "Jhorar, Kapil",
    "Employee ID No": 326022,
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "05:21:18",
    " Time Taken (Min)": 0,
    "Time of Completion": "05:21:18",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "SLA Met": "Yes",
    "Completed By": "Manisha Choudhari"
  },
  {
    "Sr. No": 2,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "11:12:09",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_9th Flr_Main Entrance",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Swapnil Diwate",
    "Employee Name": "Zikov Laurino, Ivan Alexander",
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "11:12:09",
    " Time Taken (Min)": 0,
    "Time of Completion": "11:12:09",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "SLA Met": "Yes",
    "Completed By": "Swapnil Diwate"
  },
  {
    "Sr. No": 3,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "11:20:23",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_9th Flr_Main Entrance",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Swapnil Diwate",
    "Employee Name": "Trinkune, Jolanta",
    "Employee ID No": 307427,
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "11:20:23",
    " Time Taken (Min)": 0,
    "Time of Completion": "11:20:23",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "SLA Met": "Yes",
    "Completed By": "Swapnil Diwate"
  },
  {
    "Sr. No": 4,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "11:41:17",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_1st Flr_Parking",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Swapnil Diwate",
    "Employee Name": "Kitkovskaja, Beata",
    "Employee ID No": 250761,
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "11:41:17",
    " Time Taken (Min)": 0,
    "Time of Completion": "11:41:17",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "SLA Met": "Yes",
    "Completed By": "Swapnil Diwate"
  },
  {
    "Sr. No": 5,
    "Date": "01-Apr-25",
    "Time of  Alarm (Local time)": "11:42:00",
    "Owner": "GSOC",
    "Type of Alarm": "Badge Access",
    "Door": "EMEA_LT_VNO_GAMA_8th Flr_Stairway",
    "Location": "LT.Vilnius",
    "Region": "EMEA",
    "Rejection": "Wrong Pin",
    "CCURE Incident Priority": "Low",
    "Name of Person Attending Alarms (First, Last Name)": "Swapnil Diwate",
    "Employee Name": "Mashtaler, Yan",
    "Employee ID No": 314776,
    "If Reoccured Yes/No": "No",
    "Action Taken": "Not Sent",
    "Remediation Notes": "Email not sent- As currently we are not sending 1st and 2nd time Wrong Pin Access Violation mail to EMEA rigion",
    "Target SLA in Mins": "0:00:00",
    "Date of Action (MM/DD/YY)": "01-Apr-25",
    "Time of Action": "11:42:00",
    " Time Taken (Min)": 0,
    "Time of Completion": "11:42:00",
    "If not resolved, escalated to?": "NA",
    "Date of Escalation": "NA",
    "Time Of Escalation": "NA",
    "SLA Met": "Yes",
    "Completed By": "Swapnil Diwate"
  },
