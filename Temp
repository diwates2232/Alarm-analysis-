

Would you like to run the app on another port instead? Yes
i ｢wds｣: Project is running at http://10.199.34.103/
i ｢wds｣: webpack output is served from
i ｢wds｣: Content not from webpack is served from C:\Users\W0024618\Desktop\AlarmAnalysis\alarm-frontend\public
i ｢wds｣: 404s will fallback to /
Starting the development server...
Failed to compile.

./src/components/SummaryCards.js
  Line 6:10:  Parsing error: Identifier 'Card' has already been declared.

  4 | import '../styles/SummaryCards.css';
  5 | import { Pie, Bar } from 'react-chartjs-2';
> 6 | import { Card, CardContent, Typography, Grid } from '@mui/material';
    |          ^
  7 |
  8 | // Register Chart.js elements for react-chartjs-2
  9 | import {
Error from chokidar (C:\): Error: EBUSY: resource busy or locked, lstat 'C:\DumpStack.log.tmp'





Read below SummaryCards.js
and solve above errors

import { Card  } from '@mui/material';
//import { Card } from 'react-bootstrap';
import React from 'react';
import '../styles/SummaryCards.css';
import { Pie, Bar } from 'react-chartjs-2';
import { Card, CardContent, Typography, Grid } from '@mui/material';

// Register Chart.js elements for react-chartjs-2
import {
  Chart as ChartJS,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Tooltip,
  Legend
);


const SummaryCards = ({ summary }) => {
  if (!summary) return null;

  const {
    totalAlarms,
    responseSentPercentage,
    regionWise,
    priorityWise,
    operatorWise
  } = summary; // removed rejectionTypeWise since unused

  const regionChart = {
    labels: Object.keys(regionWise || {}),
    datasets: [{
      data: Object.values(regionWise || {}).map(r => r.count),
      backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1']
    }]
  };

  const priorityChart = {
    labels: Object.keys(priorityWise || {}),
    datasets: [{
      data: Object.values(priorityWise || {}).map(p => p.count),
      backgroundColor: ['#6c757d', '#17a2b8', '#fd7e14', '#20c997']
    }]
  };

  const operatorChart = {
    labels: Object.keys(operatorWise || {}),
    datasets: [{
      label: 'Alarm Count',
      data: Object.values(operatorWise || {}).map(o => o.count),
      backgroundColor: '#007bff'
    }]
  };

  return (
    <div className="summary-container">
      <h2>Alarm Summary</h2>

      {/* MUI Cards Summary */}
      <Grid container spacing={2} className="summary-cards">
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6">Total Alarms</Typography>
              <Typography variant="h5" color="primary">{totalAlarms}</Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6">Response Sent</Typography>
              <Typography variant="h5" color="secondary">{responseSentPercentage}</Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Charts Section */}
      <div className="charts">
        <div className="chart">
          <h4>Region Wise</h4>
          <Pie data={regionChart} />
        </div>
        <div className="chart">
          <h4>Priority Wise</h4>
          <Pie data={priorityChart} />
        </div>
        <div className="chart">
          <h4>Operator Wise</h4>
          <Bar data={operatorChart} />
        </div>
      </div>
    </div>
  );
};

export default SummaryCards;
