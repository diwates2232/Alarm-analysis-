<Container maxWidth={false} sx={{ py:4 }}>
  {/* Filters + Export Buttons */}
  {/* …your Filters + export buttons here… */}

  {/* Cards */}
  <Box ref={cardsRef} sx={{ mb: 4 }}>
    {/* (optional) extra wrapper if you need spacing for an “Export Cards” button */}
    <Box sx={{ mb:2 }}>
      <Button
        variant="outlined"
        size="small"
        onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}
      >
        Export Cards
      </Button>
    </Box>

    <AlarmCard
      summary={filteredSummary}
      rawAlarms={filtered}
      filters={filters}
    />
  </Box>

  {/* Charts */}
  <Box ref={chartsRef} sx={{ mb: 4 }}>
    <Box sx={{ mb:2 }}>
      <Button
        variant="outlined"
        size="small"
        onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}
      >
        Export Charts
      </Button>
    </Box>

    <SummaryCards
      summary={filteredSummary}
      filters={filters}
      rawAlarms={filtered}
    />
  </Box>
</Container>





--- /pages/Dashboard.js
+++ /pages/Dashboard.js
@@ export default function Dashboard() {
-  return (
-    <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }} ref={dashRef}>
-      {/* Header */}
+  return (
+    <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }} ref={dashRef}>
+      {/* Header */}
       <Box component="header" sx={{
         display: 'flex', alignItems: 'center', justifyContent: 'space-between',
         borderBottom: '3px solid #1976d2', bgcolor: '#e3f2fd', p:2
       }}>
@@
       </Box>
 
       <Container maxWidth={false} sx={{ py:4 }}>
-        {/* Export All */}
-        <Box sx={{ mb:2 }}>
-          <Button
-            variant="contained" color="primary"
-            onClick={() => exportSection(dashRef.current, 'Full_Dashboard.pptx')}
-          >
-            Export Dashboard PPT
-          </Button>
-        </Box>
-
-        {/* Filters */}
-        <Filters
+        {/* Filters + Export Buttons */}
+        <Box sx={{
+          mb: 2,
+          display: 'flex',
+          alignItems: 'center',
+          gap: 2,
+          flexWrap: 'wrap'
+        }}>
+          {/* your existing Filters row */}
+          <Filters
             filters={filters} setFilters={setFilters}
             regionOptions={regionOptions}
             locationOptions={locationOptions}
             monthOptions={monthOptions}
             priorityOptions={priorityOptions}
           />
+          {/* moved export buttons */}
+          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
+            <Button
+              variant="contained"
+              size="small"
+              onClick={() => exportSection(dashRef.current, 'Full_Dashboard.pptx')}
+            >
+              Export Dashboard PPT
+            </Button>
+            <Button
+              variant="outlined"
+              size="small"
+              onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}
+            >
+              Export Cards
+            </Button>
+            <Button
+              variant="outlined"
+              size="small"
+              onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}
+            >
+              Export Charts
+            </Button>
+          </Box>
+        </Box>
 
         {/* Cards */}
@@
-        <Box ref={cardsRef}>
-          <Box sx={{ mb:2 }}>
-            <Button
-              variant="outlined" size="small"
-              onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}
-              sx={{ mb:2 }}
-            >
-              Export Cards
-            </Button>
-          </Box>
+        <Box ref={cardsRef}>
           <AlarmCard
             summary={filteredSummary}
             rawAlarms={filtered}
@@
-        <Box ref={chartsRef}>
-          <Box sx={{ mb:2 }}>
-            <Button
-              variant="outlined" size="small"
-              onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}
-              sx={{ mb:2 }}
-            >
-              Export Charts
-            </Button>
-          </Box>
+        <Box ref={chartsRef}>
           <SummaryCards
             summary={filteredSummary}
             filters={filters}












read All file carefully.i want to do some changes in dashboard.

Add this buttons on one line side of 
Priority options  Export Dashboard ppt ,l  EXPORT CARDS , EXPORT CHARTS  etc....

in Dashboard Location Wise , Month Wise graphs are display correct but lines are not Display 
Colourfully.so make this line Colourfully..

kindly make changes carefully and give me updated js file carefully.
dont make Changes in another file,
if need i will share you another file details for more information

File 1

Alarmcard.js

// src/components/AlarmCard.js
import React from 'react';
import { Card, CardContent, Typography, Grid } from '@mui/material';

export default function AlarmCard({ summary, rawAlarms, filters }) {
  if (!summary) return null;

  // helper: turn "01-Apr-25" → "Apr 25"
  const formatMonthYear = dateStr => {
    const [ , mon, yy ] = dateStr.split('-');
    return `${mon} ${yy}`;
  };

  // 1) apply all filters (region, location, month, priority)
  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                         return false;
    if (filters.location && a.Location !== filters.location)                       return false;
    if (filters.month    && formatMonthYear(a.Date) !== filters.month)             return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)     return false;
    return true;
  });

  const totalAlarms = filtered.length;

  // normalize helper
  const normalize = str => (str || '').toString().trim().toLowerCase();

  // 2) counts per your rules
  const responseSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'response sent'
  ).length;

  const notSentCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'no' &&
    normalize(a['Action Taken']) === 'not sent'
  ).length;

  const reoccurredCount = filtered.filter(a =>
    normalize(a['If Reoccured Yes/No']) === 'yes' &&
    normalize(a['Action Taken']) === 'reoccured'
  ).length;

  const responseSentPercentage = totalAlarms
    ? `${((responseSentCount / totalAlarms) * 100).toFixed(2)}%`
    : '0%';

  return (
    <Grid container spacing={1} sx={{ mb: 2 }}>
      {/* Total Alarms */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Total Alarms</Typography>
          <Typography variant="h4">{totalAlarms}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Response Sent */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Response Sent</Typography>
          <Typography variant="h4">{responseSentCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Not Sent */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Not Sent</Typography>
          <Typography variant="h4">{notSentCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Re-occurred */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Re-occurred</Typography>
          <Typography variant="h4">{reoccurredCount}</Typography>
        </CardContent></Card>
      </Grid>

      {/* Response Sent % */}
      <Grid item xs={3} sm={1} md={1.5}>
        <Card><CardContent>
          <Typography variant="subtitle1">Response Sent %</Typography>
          <Typography variant="h4">{responseSentPercentage}</Typography>
        </CardContent></Card>
      </Grid>
    </Grid>
  );
}



File 2

Chart.js

import React, { useEffect, useRef } from 'react';
import Chart from 'chart.js';
import ChartDataLabels from 'chartjs-plugin-datalabels';
import { borderColor } from '@mui/system';
Chart.plugins.register(ChartDataLabels);

// stronger, fixed palette
const defaultColors = [
  '#3366CC', '#DC3912', '#FF9900', '#109618',
  '#990099', '#0099C6', '#DD4477', '#66AA00',
  '#B82E2E', '#316395'
];

export default function MyChart({
  type = 'bar',
  data,
  options = {},
  width = '100%',
  height = '100%'
}) {
  const canvasRef = useRef(null);
  const chartRef  = useRef(null);

  //Register the datalabels plugin once
  // useEffect(() => {
  //   Chart.register(ChartDataLabels);
  // }, []);

  Chart.plugins.register(ChartDataLabels);


  useEffect(() => {
    if (!canvasRef.current) return;
    const ctx = canvasRef.current.getContext('2d');
    // chartRef.current?.destroy();
    if(chartRef.current)chartRef.current.destroy();
    const datasets = Array.isArray(data.datasets)
  ? data.datasets.map(ds => ({
      ...ds,
      borderWidth: 2,
      borderColor:ds.borderColor || '#3366CC',
      fill: type === 'line' ? false : ds.fill ?? false, // force no fill for line charts
      datalabels: {
        display: true,
        formatter: v => v,
        font: { weight: 'bold' },
        backgroundColor: 'rgba(255,255,255,0.8)',
        borderRadius: 4,
        padding: 4,
        anchor: 'end',
        align: 'top',
        clip: false
      }
    }))
  : (() => {
      const bg = data.bgColors || defaultColors.slice(0, data.values.length);
      const border = data.borderColor || bg;
      return [{
        label: data.label || '',
        data: data.values,
        backgroundColor: bg,
        borderColor: border,
        borderWidth: 2,
        fill: type === 'line' ? false : true, // also make sure this path sets it properly
        ...(type === 'line' && { tension: 0.3, pointRadius: 6 }),
        datalabels: {
          display: true,
          formatter: v => v,
          font: { weight: 'bold' },
          color: '#000',
          backgroundColor: 'rgba(255,255,255,0.8)',
          borderRadius: 4,
          padding: 4,
          anchor: 'end',
          align: 'top',
          clip: false
        }
      }];
    })();

    chartRef.current = new Chart(ctx, {
      type,
      data: {
        labels: data.labels,
        datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: { duration: 800 },
        plugins: {
          legend: { labels: { font: { size: 14 } } },
          datalabels: {
            // ensure labels can render outside dataset elements
            clip: false
          }
        },
        scales: {
          x: { beginAtZero: true, ...(options.scales?.x || {}) },
          y: { beginAtZero: true, ...(options.scales?.y || {}) }
        },
        ...options
      }
    });

    return () => chartRef.current?.destroy();
  }, [type, data, options]);

  return (
    <div style={{ width, height, border: '1px solid #ccc', borderRadius: 4, padding: 8 }}>
      <canvas ref={canvasRef} />
    </div>
  );
}



file 3 

Summarycard.js



// src/components/SummaryCards.js
import React from 'react';
import MyChart from './Chart';
import { Card, CardContent, Typography, Grid,Box  } from '@mui/material';

const PRIORITY_COLORS = {
  High: '#DC3912',
  Medium: '#FF9900',
  Low: '#109618'
};

const defaultColors = [
  '#FF9900','#109618','#FED06A','#DC3912',
  '#990099','#0099C6','#C1D82F','#66AA00',
  '#3366CC','#B82E2E','#316395','#71C9CD'
];

const REJECTION_COLORS = [
  '#006400','#00008B','#8B008B','#FF1493',
  '#00CED1','#2F4F4F','#6f1c03','#ff9a00'
];

const REJECTION_COLOR_MAP = {
  'Wrong Pin':'#49A044','Facility code':'#49A044',
  'Unknown card':'#49A044','Not activated':'#49A044',
  'Site code':'#49A044','Clearance - Access Violation':'#FFDF00',
  'Expired':'#FFDF00','Lost':'#FFDF00',
  'Disabled Badge':'#FFA500','Duress Alarm':'#FFA500',
};

// helper: "01-Apr-25" → "Apr 25"
const formatMonthYear = dateStr => {
  const [ , mon, yy ] = dateStr.split('-');
  return `${mon} ${yy}`;
};

export default function SummaryCards({ summary, filters, rawAlarms }) {
  if (!summary) return null;

  const {
    rejectionTypeWise = {},
    regionWise = {},
    monthWise = {},
    locationWise = {},
    operatorWise = {}
  } = summary;

  // apply filters
  const filtered = rawAlarms.filter(a => {
    if (filters.region   && a.Region   !== filters.region)                         return false;
    if (filters.location && a.Location !== filters.location)                       return false;
    if (filters.month    && formatMonthYear(a.Date) !== filters.month)             return false;
    if (filters.priority && a['CCURE Incident Priority'] !== filters.priority)     return false;
    return true;
  });

  // 1) Rejection Stats
  const rejectionCounts = filtered.reduce((acc, a) => {
    acc[a.Rejection] = (acc[a.Rejection] || 0) + 1;
    return acc;
  }, {});
  const rejectionStats = Object.entries(rejectionCounts)
    .map(([type,count],i) => {
      const pct = filtered.length
        ? `${((count/filtered.length)*100).toFixed(2)}%`
        : '0%';
      return {
        type, count, percentage: pct,
        color: REJECTION_COLOR_MAP[type]
          || REJECTION_COLORS[i % REJECTION_COLORS.length]
      };
    })
    .sort((a,b)=>b.count-a.count);

  // 2) Priority Wise
  const prCounts = filtered.reduce((acc,a)=> {
    const p = a['CCURE Incident Priority'];
    acc[p] = (acc[p]||0)+1;
    return acc;
  }, {});
  const prLabels = Object.keys(prCounts);
  const prValues = prLabels.map(l=>prCounts[l]);
  const prColors = prLabels.map(l=>PRIORITY_COLORS[l]||'#999');

  // 3) Operator Wise (from summary.operatorWise)
  const opLabels = Object.keys(operatorWise);
  const opValues = opLabels.map(l=>operatorWise[l].count||0);
  const opColors = defaultColors.slice(0,opLabels.length);

  // 4) Partition (region or location)
  const partitionObj = !filters.region
    ? Object.fromEntries(Object.entries(regionWise).map(([r,i])=>[r,i.count||0]))
    : filtered.reduce((acc,a)=>{ acc[a.Location]=(acc[a.Location]||0)+1; return acc; }, {});
  const partLabels = Object.keys(partitionObj);
  const partValues = partLabels.map(l=>partitionObj[l]);
  const partColors = defaultColors.slice(0,partLabels.length);

  // 5) Month Wise
  const monthCounts = filtered.reduce((acc,a)=>{
    const key = formatMonthYear(a.Date);
    acc[key]=(acc[key]||0)+1; return acc;
  }, {});
  const monthOrder = Object.keys(monthCounts).sort((a,b)=>{
    // parse back to date to sort
    const [mA,yA] = a.split(' '), [mB,yB] = b.split(' ');
    const dA = new Date(`20${yA}-${mA}-01`);
    const dB = new Date(`20${yB}-${mB}-01`);
    return dA - dB;
  });
  const monthLabels = monthOrder;
  const monthValues = monthLabels.map(m=>monthCounts[m]);
  const monthColors = defaultColors.slice(0,monthLabels.length);

  // 6) Location Wise
  const locCounts = filtered.reduce((acc,a)=>{ acc[a.Location]=(acc[a.Location]||0)+1; return acc; }, {});
  const locLabels = Object.keys(locCounts);
  const locValues = locLabels.map(l=>locCounts[l]);
  const locColors = defaultColors.slice(0,locLabels.length);

  // 7) Priority by Location
  const locations = [...new Set(filtered.map(a=>a.Location))];
  const priorities = ['Low','Medium','High','Critical'];
  const seriesData = priorities.map((prio,i)=>({
    label: prio,
    data: locations.map(loc=>
      filtered.filter(a=>
        a.Location===loc && a['CCURE Incident Priority']===prio
      ).length
    ),
    borderColor: PRIORITY_COLORS[prio]||defaultColors[i%defaultColors.length],
    backgroundColor: 'transparent'
  }));

   return (
    <>
      {/* Rejection Cards */}
      <Grid container spacing={1} sx={{ mb: 2 }}>
        {rejectionStats.map(r => (
          <Grid item xs={3} sm={1} md={1.5} key={r.type}>
            <Card sx={{ border: `2px solid ${r.color}`, bgcolor: r.color, color: '#fff' }}>
              <CardContent>
                <Typography variant="subtitle2">{r.type}</Typography>
                <Typography variant="h6">{r.count}</Typography>
                <Typography variant="body2">{r.percentage}</Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Partition / Priority / Location */}
      <Grid container spacing={5} sx={{ mb: 4 }}>
        {partLabels.length > 0 && (
          <Grid item xs={12} sm={6} md={4}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  {!filters.region ? 'Global Partition' : `${filters.region} → Location`}
                </Typography>
                <Box width="100%" height={550}>
                  <MyChart
                    type="doughnut"
                    data={{ labels: partLabels, values: partValues, bgColors: partColors, borderColor: partColors }}
                    // remove hard-coded width/height props here
                  />
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}

        {prLabels.length > 0 && (
          <Grid item xs={12} sm={6} md={4}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>Priority Wise</Typography>
                <Box width="100%" height={550}>
                  <MyChart
                    type="pie"
                    data={{ labels: prLabels, values: prValues, bgColors: prColors, borderColor: prColors }}
                  />
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}

        {locLabels.length > 0 && (
          <Grid item xs={12} sm={12} md={4}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>Location Wise</Typography>
                <Box width="100%" height={550}>
                  <MyChart
                    type="line"
                    data={{ labels: locLabels, values: locValues, bgColors: locColors, borderColor: locColors }}
                    options={{
                      scales: {
                        x: { title: { display: true, text: 'Location' } },
                        y: { title: { display: true, text: 'Alarm Count' } },
                      },
                    }}
                  />
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}
      </Grid>

      {/* P-by-L, Month & Operator in one row */}
      <Grid container spacing={5} sx={{ mb: 4 }}>
        {/* Priority by Location */}
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>Priority by Location</Typography>
              <Box width="100%" height={550}>
                <MyChart
                  type="line"
                  data={{ labels: locations, datasets: seriesData }}
                  options={{
                    scales: {
                      x: { title: { display: true, text: 'Location' } },
                      y: { title: { display: true, text: 'Alarm Count' } },
                    },
                    plugins: { legend: { position: 'bottom' } },
                  }}
                />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Month Wise */}
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>Month Wise</Typography>
              <Box width="100%" height={550}>
                <MyChart
                  type="line"
                  data={{ labels: monthLabels, values: monthValues, bgColors: monthColors, borderColor: monthColors }}
                  options={{
                    scales: {
                      x: { title: { display: true, text: 'Month' } },
                      y: { title: { display: true, text: 'Alarm Count' } },
                    },
                  }}
                />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Operator Wise */}
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>Operator Wise</Typography>
              <Box width="100%" height={550}>
                <MyChart
                  type="bar"
                  data={{ labels: opLabels, values: opValues, bgColors: opColors, borderColor: opColors }}
                  options={{
                    scales: {
                      x: { title: { display: true, text: 'Operator' } },
                      y: { title: { display: true, text: 'Alarm Count' } },
                    },
                  }}
                />
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </>
  );
}



File 5


dashboard.js

/pages/Dashboard.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { Box, Typography, Container, Button } from '@mui/material';
import DashboardIcon from '@mui/icons-material/Dashboard';
import Filters from '../components/Filters';
import AlarmCard from '../components/AlarmCard';
import SummaryCards from '../components/SummaryCards';
import { getAlarmSummary, getRawAlarms } from '../services/api';
import { Link } from 'react-router-dom';
import html2canvas from 'html2canvas';
import PptxGenJS from 'pptxgenjs';


// helper: convert "01-Apr-25" → "2025-04-01"
function toISODate(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  const monthNames = {
    Jan: '01', Feb: '02', Mar: '03', Apr: '04',
    May: '05', Jun: '06', Jul: '07', Aug: '08',
    Sep: '09', Oct: '10', Nov: '11', Dec: '12'
  };
  const mm = monthNames[monAbbr] || '01';
  const yyyy = `20${yy}`;
  return `${yyyy}-${mm}-${d.padStart(2, '0')}`;
}

// helper: format month/year for dropdown (e.g. "Apr 25")
function formatMonthYear(apiDate) {
  const [d, monAbbr, yy] = apiDate.split('-');
  return `${monAbbr} ${yy}`;
}

export default function Dashboard() {
  const [summary, setSummary]     = useState(null);
  const [rawAlarms, setRawAlarms] = useState([]);
  const [filters, setFilters]     = useState({
    region: '', location: '', month: '', date: '', priority: ''
  });

  // refs to sections for export
  const dashRef = useRef();
  const cardsRef = useRef();
  const chartsRef = useRef();

  useEffect(() => {
    Promise.all([getAlarmSummary(), getRawAlarms()])
      .then(([sumRes, rawRes]) => {
        setSummary(sumRes.data);
        setRawAlarms(rawRes.data);
      })
      .catch(console.error);
  }, []);

  // 1️⃣ dropdown options
  const regionOptions = useMemo(
    () => summary ? Object.keys(summary.regionWise) : [],
    [summary]
  );
  const locationOptions = useMemo(
    () => filters.region
      ? Array.from(new Set(
          rawAlarms.filter(a => a.Region === filters.region).map(a => a.Location)
        ))
      : [],
    [rawAlarms, filters.region]
  );
  const monthOptions = useMemo(() => {
    const all = rawAlarms
      .filter(a =>
        (!filters.region   || a.Region   === filters.region) &&
        (!filters.location || a.Location === filters.location)
      )
      .map(a => formatMonthYear(a.Date));
    return Array.from(new Set(all))
      .sort((a, b) => {
        const [mA, yA] = a.split(' ');
        const [mB, yB] = b.split(' ');
        const dateA = new Date(`20${yA}-${mA}-01`);
        const dateB = new Date(`20${yB}-${mB}-01`);
        return dateA - dateB;
      });
  }, [rawAlarms, filters.region, filters.location]);

  const priorityOptions = useMemo(
    () => Array.from(new Set(rawAlarms.map(a => a['CCURE Incident Priority']))),
    [rawAlarms]
  );

  // 2️⃣ filtered base
  const filtered = useMemo(() => (
    rawAlarms.filter(a => {
      if (filters.region   && a.Region   !== filters.region)              return false;
      if (filters.location && a.Location !== filters.location)            return false;
      if (filters.month    && formatMonthYear(a.Date) !== filters.month)  return false;
      if (filters.date     && toISODate(a.Date) !== filters.date)         return false;
      if (filters.priority && a['CCURE Incident Priority'] !== filters.priority) return false;
      return true;
    })
  ), [rawAlarms, filters]);

  // 3️⃣ filteredSummary for cards
  const filteredSummary = useMemo(() => {
    if (!summary) return null;
    const fs = { ...summary };

    if (filters.region) {
      fs.regionWise   = { [filters.region]: summary.regionWise[filters.region] };
      fs.locationWise = {};
      locationOptions
        .filter(l => !filters.location || l === filters.location)
        .forEach(l => {
          fs.locationWise[l] = summary.locationWise[l];
        });
    }

    if (filters.month) {
      const mCount = filtered.filter(a => formatMonthYear(a.Date) === filters.month).length;
      fs.monthWise = { [filters.month]: { count: mCount } };
    } else {
      fs.monthWise = {};
    }

    const opCounts = filtered.reduce((c, a) => {
      const op = a['Name of Person Attending Alarms (First, Last Name)'] || 'Unknown';
      c[op] = (c[op] || 0) + 1;
      return c;
    }, {});
    fs.operatorWise = Object.fromEntries(
      Object.entries(opCounts).map(([k, v]) => [k, { count: v }])
    );

    return fs;
  }, [summary, filtered, filters, locationOptions]);

  if (!summary) return <Typography>Loading dashboard…</Typography>;

  // COMMON export logic
  const exportSection = async (element, fileName = 'slide.pptx') => {
    const canvas = await html2canvas(element);
    const imgData = canvas.toDataURL('image/png');
    const ppt = new PptxGenJS();
    const slide = ppt.addSlide();
    slide.addImage({ data: imgData, x:0, y:0, w:'100%', h:'100%' });
    await ppt.writeFile(fileName);
  };

  return (
    <Box sx={{ width: '100vw', minHeight: '100vh', overflowX: 'hidden' }} ref={dashRef}>
      {/* Header */}
      <Box component="header" sx={{
        display: 'flex', alignItems: 'center', justifyContent: 'space-between',
        borderBottom: '3px solid #1976d2', bgcolor: '#e3f2fd', p:2
      }}>
        <Box sx={{ display:'flex', alignItems:'center', gap:1 }}>
          <DashboardIcon fontSize="large"/>
          <Typography variant="h4">Alarm Analysis Dashboard</Typography>
        </Box>
        <Box sx={{ display:'flex', gap:2 }}>
          <Link to="/">➤ Dashboard</Link>
          <Link to="/alarms">➤ Raw Alarms</Link>
        </Box>
      </Box>

      <Container maxWidth={false} sx={{ py:4 }}>
        {/* Export All */}
        <Box sx={{ mb:2 }}>
          <Button
            variant="contained" color="primary"
            onClick={() => exportSection(dashRef.current, 'Full_Dashboard.pptx')}
          >
            Export Dashboard PPT
          </Button>
        </Box>

        {/* Filters */}
        <Filters
          filters={filters} setFilters={setFilters}
          regionOptions={regionOptions}
          locationOptions={locationOptions}
          monthOptions={monthOptions}
          priorityOptions={priorityOptions}
        />

        {/* Cards */}
        <Box ref={cardsRef}>
          <Box sx={{ mb:2 }}>
            <Button
              variant="outlined" size="small"
              onClick={() => exportSection(cardsRef.current, 'Cards_Slide.pptx')}
              sx={{ mb:2 }}
            >
              Export Cards
            </Button>
          </Box>
          <AlarmCard
            summary={filteredSummary}
            rawAlarms={filtered}
            filters={filters}
          />
        </Box>

        {/* Charts */}
        <Box ref={chartsRef}>
          <Box sx={{ mb:2 }}>
            <Button
              variant="outlined" size="small"
              onClick={() => exportSection(chartsRef.current, 'Charts_Slide.pptx')}
              sx={{ mb:2 }}
            >
              Export Charts
            </Button>
          </Box>
          <SummaryCards
            summary={filteredSummary}
            filters={filters}
            rawAlarms={filtered}
          />
        </Box>
      </Container>
    </Box>
  );
}








